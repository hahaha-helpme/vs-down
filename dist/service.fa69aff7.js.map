{"version":3,"sources":["../../../node_modules/moment/moment.js","../../../node_modules/chart.js/dist/Chart.min.js","../../1-plugins/chartjs/_chartjs.js","../../2-base-blocks/_modal.js","pug.config.js","../../3-blocks/_header.js","../../3-blocks/_downChart.js","../../3-blocks/_faq.js","../../3-blocks/_reportProblem.js","service.js"],"names":["storeButton","modalClasses","freeze","class","toggleClass","blur","modal","buttonsAndContent","reportProblem","button","content","visible","countryChange","about","hamburgerBtn","document","querySelector","submitBtn","toggleModal","key","element","modalclass","toggleThisClass","classList","toggle","toggleModalContent","i","j","length","toggleOnThisClass","buttonsToOpenmodal","buttonArray","push","forEach","addEventListener","event","preventDefault","onclick","window","target","reportProblemDescriptionButton","isDescriptionReportButtonAlreadyclickedBefore","reportProblemDescriptionHeader","datalayer","serviceView","header","reportProblemDescriptionParagraph","paragraph","reportData","type","languageCode","language","code","countryCode","country","nameHyphen","service","cityName","city","asciiNameHyphen","description","value","currentURL","location","href","url","fetch","method","headers","body","JSON","stringify","textContent","module","exports","locals","viewLocals","doctype","head","canonical","title","relAlternate","hrefLang","nav","links","logo","images","flag","text","alt","downChart","serviceDetails","faq","accordion","question","answer","breadcrumb","link","position","anchor","geolocation","flags","img","positionPushing","countryAlternative","advertisement","commentsSection","dataLocale","status","downSince","nameCase","logoImage","logoImageAlt","seo","cumulativeSearchVolume","name","endonym","geonameCode","flagImage","flagImageAlt","state","asciiName","notDown","maybeDown","down","noMinutes","oneMinuteBegin","oneMinuteEnd","multibleMinutesBegin","multibleMinutesEnd","labelNow","tooltipLabel","timeReportsSequence","homepageView","homepage","dataLayer","templateData","getMarkColor","setMarkColor","color","ctx","getElementById","getContext","maxTimeValue","Math","max","apply","map","object","Date","parse","time","sequenceLength","lastNumHours","timeBlockLengthInMinutes","msPerMinute","sequenceDate","toISOString","some","e","count","date","sort","b","a","dateA","localesOptions","hour","minute","locales","timeLabels","sequenceOfReports","toLocaleTimeString","data","labels","datasets","backgroundColor","borderColor","pointRadius","borderWidth","options","defaultFontFamily","Chart","defaults","global","responsive","aspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItems","yLabel","legend","display","scales","xAxes","gridLines","ticks","reverse","lineHeight","yAxes","suggestedMin","suggestedMax","chart","plugins","id","afterLayout","currentStatus","aspectRatioNum","innerWidth","parseFloat","getComputedStyle","min","toFixed","setborderColor","getBorderColor","setGradient","createLinearGradient","top","chartColors","getGradientColor","addColorStop","acc","getElementsByClassName","accHeader","panel","nextElementSibling","style","maxHeight","scrollHeight","reportProblemButton","isReportButtonAlreadyclickedBefore","require"],"mappings":"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AAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,IAAA,GAAA,QAAA,GAAA,GAAA,QAAA,QAAA,KAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,IAAA,CAAA,KAAA,EAAA,EAAA,QAAA,KAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,EAAA,EAAA,QAAA,KAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,QAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,MAAA,CAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,GAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,KAAA,OAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,KAAA,MAAA,GAAA,EAAA,EAAA,EAAA,KAAA,MAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GAAA,IAAA,GAAA,KAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,KAAA,IAAA,EAAA,KAAA,OAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,KAAA,GAAA,IAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,IAAA,GAAA,KAAA,GAAA,KAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,MAAA,EAAA,IAAA,IAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,GAAA,QAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,CAAA,KAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,MAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,OAAA,GAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,EAAA,MAAA,GAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,GAAA,OAAA,GAAA,MAAA,GAAA,SAAA,MAAA,KAAA,IAAA,EAAA,EAAA,KAAA,KAAA,MAAA,EAAA,EAAA,EAAA,SAAA,MAAA,KAAA,IAAA,EAAA,EAAA,KAAA,KAAA,MAAA,EAAA,EAAA,EAAA,SAAA,MAAA,KAAA,IAAA,EAAA,EAAA,KAAA,KAAA,MAAA,EAAA,CAAA,KAAA,EAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAAA,MAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,IAAA,GAAA,QAAA,GAAA,GAAA,QAAA,QAAA,KAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,IAAA,CAAA,KAAA,EAAA,EAAA,QAAA,KAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,EAAA,EAAA,QAAA,KAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,QAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,IAAA,K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GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,CAAA,KAAA,GAAA,GAAA,IAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,KAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,IAAA,GAAA,EAAA,GAAA,IAAA,EAAA,IAAA,CAAA,EAAA,GAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,IAAA,CAAA,EAAA,GAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,MAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,GAAA,IAAA,EAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,KAAA,MAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,MAAA,QAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,GAAA,EAAA,GAAA,EAAA,CAAA,KAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,EAAA,GAAA,KAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,KAAA,CAAA,EAAA,GAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,KAAA,EAAA,IAAA,IAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,IAAA,CAAA,EAAA,GAAA,IAAA,EAAA,IAAA,IAAA,EAAA,MAAA,IAAA,SAAA,GAAA,MAAA,CAAA,EAAA,GAAA,MAAA,IAAA,EAAA,GAAA,MAAA,IAAA,EAAA,GAAA,MAAA,MAAA,EAAA,IAAA,MAAA,SAAA,GAAA,MAAA,CAAA,EAAA,GAAA,IAAA,MAAA,EAAA,GAAA,IAAA,MAAA,EAAA,GAAA,IAAA,QAAA,EAAA,KAAA,IAAA,SAAA,GAAA,MAAA,CAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,IAAA,MAAA,EAAA,KAAA,IAAA,EAAA,KAAA,IAAA,SAAA,GAAA,MAAA,CAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,IAAA,SAAA,GAAA,MAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,KAAA,SAAA,GAAA,MAAA,CAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,IAAA,SAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,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","file":"service.fa69aff7.js","sourceRoot":"../views/0-views/service","sourcesContent":["//! moment.js\n//! version : 2.26.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m),\n                parsedParts = some.call(flags.parsedDateParts, function (i) {\n                    return i != null;\n                }),\n                isNowValid =\n                    !isNaN(m._d.getTime()) &&\n                    flags.overflow < 0 &&\n                    !flags.empty &&\n                    !flags.invalidEra &&\n                    !flags.invalidMonth &&\n                    !flags.invalidWeekday &&\n                    !flags.weekdayMismatch &&\n                    !flags.nullInput &&\n                    !flags.invalidFormat &&\n                    !flags.userInvalidated &&\n                    (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            } else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key;\n                for (i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias(unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        return mom.isValid()\n            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()\n            : NaN;\n    }\n\n    function set$1(mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (\n                unit === 'FullYear' &&\n                isLeapYear(mom.year()) &&\n                mom.month() === 1 &&\n                mom.date() === 29\n            ) {\n                value = toInt(value);\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](\n                    value,\n                    mom.month(),\n                    daysInMonth(value, mom.month())\n                );\n            } else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i;\n            for (i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (\n                    matched,\n                    p1,\n                    p2,\n                    p3,\n                    p4\n                ) {\n                    return p1 || p2 || p3 || p4;\n                })\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M', match1to2);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n            '_'\n        ),\n        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(\n            '_'\n        ),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w', match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(\n            '_'\n        ),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n            ? weekdays[m.day()]\n            : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n            ? this._weekdaysShort[m.day()]\n            : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n            ? this._weekdaysMin[m.day()]\n            : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2);\n    addRegexToken('h', match1to2);\n    addRegexToken('k', match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            typeof module !== 'undefined' &&\n            module &&\n            module.exports\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                    ? DATE\n                    : a[HOUR] < 0 ||\n                      a[HOUR] > 24 ||\n                      (a[HOUR] === 24 &&\n                          (a[MINUTE] !== 0 ||\n                              a[SECOND] !== 0 ||\n                              a[MILLISECOND] !== 0))\n                    ? HOUR\n                    : a[MINUTE] < 0 || a[MINUTE] > 59\n                    ? MINUTE\n                    : a[SECOND] < 0 || a[SECOND] > 59\n                    ? SECOND\n                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                    ? MILLISECOND\n                    : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged and will be removed in an upcoming major release. Please refer to ' +\n            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n            ? 'lastWeek'\n            : diff < 0\n            ? 'lastDay'\n            : diff < 1\n            ? 'sameDay'\n            : diff < 2\n            ? 'nextDay'\n            : diff < 7\n            ? 'nextWeek'\n            : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (\n        input,\n        array,\n        config,\n        token\n    ) {\n        var era = config._locale.erasParse(input, token, config._strict);\n        if (era) {\n            getParsingFlags(config).era = era;\n        } else {\n            getParsingFlags(config).invalidEra = input;\n        }\n    });\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            namePieces.push(regexEscape(eras[i].name));\n            abbrPieces.push(regexEscape(eras[i].abbr));\n            narrowPieces.push(regexEscape(eras[i].narrow));\n\n            mixedPieces.push(regexEscape(eras[i].name));\n            mixedPieces.push(regexEscape(eras[i].abbr));\n            mixedPieces.push(regexEscape(eras[i].narrow));\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday(),\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D', match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m', match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s', match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                        ? 'st'\n                        : b === 2\n                        ? 'nd'\n                        : b === 3\n                        ? 'rd'\n                        : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1() {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y');\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.26.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","/*!\n * Chart.js v2.9.3\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e(function(){try{return require(\"moment\")}catch(t){}}()):\"function\"==typeof define&&define.amd?define([\"require\"],(function(t){return e(function(){try{return t(\"moment\")}catch(t){}}())})):(t=t||self).Chart=e(t.moment)}(this,(function(t){\"use strict\";t=t&&t.hasOwnProperty(\"default\")?t.default:t;var e={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n=function(t,e){return t(e={exports:{}},e.exports),e.exports}((function(t){var n={};for(var i in e)e.hasOwnProperty(i)&&(n[e[i]]=i);var a=t.exports={rgb:{channels:3,labels:\"rgb\"},hsl:{channels:3,labels:\"hsl\"},hsv:{channels:3,labels:\"hsv\"},hwb:{channels:3,labels:\"hwb\"},cmyk:{channels:4,labels:\"cmyk\"},xyz:{channels:3,labels:\"xyz\"},lab:{channels:3,labels:\"lab\"},lch:{channels:3,labels:\"lch\"},hex:{channels:1,labels:[\"hex\"]},keyword:{channels:1,labels:[\"keyword\"]},ansi16:{channels:1,labels:[\"ansi16\"]},ansi256:{channels:1,labels:[\"ansi256\"]},hcg:{channels:3,labels:[\"h\",\"c\",\"g\"]},apple:{channels:3,labels:[\"r16\",\"g16\",\"b16\"]},gray:{channels:1,labels:[\"gray\"]}};for(var r in a)if(a.hasOwnProperty(r)){if(!(\"channels\"in a[r]))throw new Error(\"missing channels property: \"+r);if(!(\"labels\"in a[r]))throw new Error(\"missing channel labels property: \"+r);if(a[r].labels.length!==a[r].channels)throw new Error(\"channel and label counts mismatch: \"+r);var o=a[r].channels,s=a[r].labels;delete a[r].channels,delete a[r].labels,Object.defineProperty(a[r],\"channels\",{value:o}),Object.defineProperty(a[r],\"labels\",{value:s})}a.rgb.hsl=function(t){var e,n,i=t[0]/255,a=t[1]/255,r=t[2]/255,o=Math.min(i,a,r),s=Math.max(i,a,r),l=s-o;return s===o?e=0:i===s?e=(a-r)/l:a===s?e=2+(r-i)/l:r===s&&(e=4+(i-a)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s===o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]},a.rgb.hsv=function(t){var e,n,i,a,r,o=t[0]/255,s=t[1]/255,l=t[2]/255,u=Math.max(o,s,l),d=u-Math.min(o,s,l),h=function(t){return(u-t)/6/d+.5};return 0===d?a=r=0:(r=d/u,e=h(o),n=h(s),i=h(l),o===u?a=i-n:s===u?a=1/3+e-i:l===u&&(a=2/3+n-e),a<0?a+=1:a>1&&(a-=1)),[360*a,100*r,100*u]},a.rgb.hwb=function(t){var e=t[0],n=t[1],i=t[2];return[a.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,i))),100*(i=1-1/255*Math.max(e,Math.max(n,i)))]},a.rgb.cmyk=function(t){var e,n=t[0]/255,i=t[1]/255,a=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-i,1-a)))/(1-e)||0),100*((1-i-e)/(1-e)||0),100*((1-a-e)/(1-e)||0),100*e]},a.rgb.keyword=function(t){var i=n[t];if(i)return i;var a,r,o,s=1/0;for(var l in e)if(e.hasOwnProperty(l)){var u=e[l],d=(r=t,o=u,Math.pow(r[0]-o[0],2)+Math.pow(r[1]-o[1],2)+Math.pow(r[2]-o[2],2));d<s&&(s=d,a=l)}return a},a.keyword.rgb=function(t){return e[t]},a.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(i=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92)),100*(.2126*e+.7152*n+.0722*i),100*(.0193*e+.1192*n+.9505*i)]},a.rgb.lab=function(t){var e=a.rgb.xyz(t),n=e[0],i=e[1],r=e[2];return i/=100,r/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116)-16,500*(n-i),200*(i-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},a.hsl.rgb=function(t){var e,n,i,a,r,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0===s)return[r=255*l,r,r];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),a=[0,0,0];for(var u=0;u<3;u++)(i=o+1/3*-(u-1))<0&&i++,i>1&&i--,r=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,a[u]=255*r;return a},a.hsl.hsv=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,a=n,r=Math.max(i,.01);return n*=(i*=2)<=1?i:2-i,a*=r<=1?r:2-r,[e,100*(0===i?2*a/(r+a):2*n/(i+n)),100*((i+n)/2)]},a.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,a=Math.floor(e)%6,r=e-Math.floor(e),o=255*i*(1-n),s=255*i*(1-n*r),l=255*i*(1-n*(1-r));switch(i*=255,a){case 0:return[i,l,o];case 1:return[s,i,o];case 2:return[o,i,l];case 3:return[o,s,i];case 4:return[l,o,i];case 5:return[i,o,s]}},a.hsv.hsl=function(t){var e,n,i,a=t[0],r=t[1]/100,o=t[2]/100,s=Math.max(o,.01);return i=(2-r)*o,n=r*s,[a,100*(n=(n/=(e=(2-r)*s)<=1?e:2-e)||0),100*(i/=2)]},a.hwb.rgb=function(t){var e,n,i,a,r,o,s,l=t[0]/360,u=t[1]/100,d=t[2]/100,h=u+d;switch(h>1&&(u/=h,d/=h),i=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(i=1-i),a=u+i*((n=1-d)-u),e){default:case 6:case 0:r=n,o=a,s=u;break;case 1:r=a,o=n,s=u;break;case 2:r=u,o=n,s=a;break;case 3:r=u,o=a,s=n;break;case 4:r=a,o=u,s=n;break;case 5:r=n,o=u,s=a}return[255*r,255*o,255*s]},a.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,a=t[3]/100;return[255*(1-Math.min(1,e*(1-a)+a)),255*(1-Math.min(1,n*(1-a)+a)),255*(1-Math.min(1,i*(1-a)+a))]},a.xyz.rgb=function(t){var e,n,i,a=t[0]/100,r=t[1]/100,o=t[2]/100;return n=-.9689*a+1.8758*r+.0415*o,i=.0557*a+-.204*r+1.057*o,e=(e=3.2406*a+-1.5372*r+-.4986*o)>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,i=i>.0031308?1.055*Math.pow(i,1/2.4)-.055:12.92*i,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(i=Math.min(Math.max(0,i),1))]},a.xyz.lab=function(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]},a.lab.xyz=function(t){var e,n,i,a=t[0];e=t[1]/500+(n=(a+16)/116),i=n-t[2]/200;var r=Math.pow(n,3),o=Math.pow(e,3),s=Math.pow(i,3);return n=r>.008856?r:(n-16/116)/7.787,e=o>.008856?o:(e-16/116)/7.787,i=s>.008856?s:(i-16/116)/7.787,[e*=95.047,n*=100,i*=108.883]},a.lab.lch=function(t){var e,n=t[0],i=t[1],a=t[2];return(e=360*Math.atan2(a,i)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(i*i+a*a),e]},a.lch.lab=function(t){var e,n=t[0],i=t[1];return e=t[2]/360*2*Math.PI,[n,i*Math.cos(e),i*Math.sin(e)]},a.rgb.ansi16=function(t){var e=t[0],n=t[1],i=t[2],r=1 in arguments?arguments[1]:a.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var o=30+(Math.round(i/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(o+=60),o},a.hsv.ansi16=function(t){return a.rgb.ansi16(a.hsv.rgb(t),t[2])},a.rgb.ansi256=function(t){var e=t[0],n=t[1],i=t[2];return e===n&&n===i?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},a.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return t>50&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(t>50));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},a.ansi256.rgb=function(t){if(t>=232){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},a.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return\"000000\".substring(e.length)+e},a.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split(\"\").map((function(t){return t+t})).join(\"\"));var i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},a.rgb.hcg=function(t){var e,n=t[0]/255,i=t[1]/255,a=t[2]/255,r=Math.max(Math.max(n,i),a),o=Math.min(Math.min(n,i),a),s=r-o;return e=s<=0?0:r===n?(i-a)/s%6:r===i?2+(a-n)/s:4+(n-i)/s+4,e/=6,[360*(e%=1),100*s,100*(s<1?o/(1-s):0)]},a.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=1,a=0;return(i=n<.5?2*e*n:2*e*(1-n))<1&&(a=(n-.5*i)/(1-i)),[t[0],100*i,100*a]},a.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=e*n,a=0;return i<1&&(a=(n-i)/(1-i)),[t[0],100*i,100*a]},a.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,i=t[2]/100;if(0===n)return[255*i,255*i,255*i];var a,r=[0,0,0],o=e%1*6,s=o%1,l=1-s;switch(Math.floor(o)){case 0:r[0]=1,r[1]=s,r[2]=0;break;case 1:r[0]=l,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=s;break;case 3:r[0]=0,r[1]=l,r[2]=1;break;case 4:r[0]=s,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=l}return a=(1-n)*i,[255*(n*r[0]+a),255*(n*r[1]+a),255*(n*r[2]+a)]},a.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),i=0;return n>0&&(i=e/n),[t[0],100*i,100*n]},a.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,i=0;return n>0&&n<.5?i=e/(2*n):n>=.5&&n<1&&(i=e/(2*(1-n))),[t[0],100*i,100*n]},a.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},a.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,i=n-e,a=0;return i<1&&(a=(n-i)/(1-i)),[t[0],100*i,100*a]},a.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},a.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},a.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},a.gray.hsl=a.gray.hsv=function(t){return[0,0,t[0]]},a.gray.hwb=function(t){return[0,100,t[0]]},a.gray.cmyk=function(t){return[0,0,0,t[0]]},a.gray.lab=function(t){return[t[0],0,0]},a.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return\"000000\".substring(n.length)+n},a.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}}));n.rgb,n.hsl,n.hsv,n.hwb,n.cmyk,n.xyz,n.lab,n.lch,n.hex,n.keyword,n.ansi16,n.ansi256,n.hcg,n.apple,n.gray;function i(t){var e=function(){for(var t={},e=Object.keys(n),i=e.length,a=0;a<i;a++)t[e[a]]={distance:-1,parent:null};return t}(),i=[t];for(e[t].distance=0;i.length;)for(var a=i.pop(),r=Object.keys(n[a]),o=r.length,s=0;s<o;s++){var l=r[s],u=e[l];-1===u.distance&&(u.distance=e[a].distance+1,u.parent=a,i.unshift(l))}return e}function a(t,e){return function(n){return e(t(n))}}function r(t,e){for(var i=[e[t].parent,t],r=n[e[t].parent][t],o=e[t].parent;e[o].parent;)i.unshift(e[o].parent),r=a(n[e[o].parent][o],r),o=e[o].parent;return r.conversion=i,r}var o={};Object.keys(n).forEach((function(t){o[t]={},Object.defineProperty(o[t],\"channels\",{value:n[t].channels}),Object.defineProperty(o[t],\"labels\",{value:n[t].labels});var e=function(t){for(var e=i(t),n={},a=Object.keys(e),o=a.length,s=0;s<o;s++){var l=a[s];null!==e[l].parent&&(n[l]=r(l,e))}return n}(t);Object.keys(e).forEach((function(n){var i=e[n];o[t][n]=function(t){var e=function(e){if(null==e)return e;arguments.length>1&&(e=Array.prototype.slice.call(arguments));var n=t(e);if(\"object\"==typeof n)for(var i=n.length,a=0;a<i;a++)n[a]=Math.round(n[a]);return n};return\"conversion\"in t&&(e.conversion=t.conversion),e}(i),o[t][n].raw=function(t){var e=function(e){return null==e?e:(arguments.length>1&&(e=Array.prototype.slice.call(arguments)),t(e))};return\"conversion\"in t&&(e.conversion=t.conversion),e}(i)}))}));var s=o,l={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},u={getRgba:d,getHsla:h,getRgb:function(t){var e=d(t);return e&&e.slice(0,3)},getHsl:function(t){var e=h(t);return e&&e.slice(0,3)},getHwb:c,getAlpha:function(t){var e=d(t);if(e)return e[3];if(e=h(t))return e[3];if(e=c(t))return e[3]},hexString:function(t,e){e=void 0!==e&&3===t.length?e:t[3];return\"#\"+v(t[0])+v(t[1])+v(t[2])+(e>=0&&e<1?v(Math.round(255*e)):\"\")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return f(t,e);return\"rgb(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\")\"},rgbaString:f,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return g(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),a=Math.round(t[2]/255*100);return\"rgb(\"+n+\"%, \"+i+\"%, \"+a+\"%)\"},percentaString:g,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return p(t,e);return\"hsl(\"+t[0]+\", \"+t[1]+\"%, \"+t[2]+\"%)\"},hslaString:p,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return\"hwb(\"+t[0]+\", \"+t[1]+\"%, \"+t[2]+\"%\"+(void 0!==e&&1!==e?\", \"+e:\"\")+\")\"},keyword:function(t){return b[t.slice(0,3)]}};function d(t){if(t){var e=[0,0,0],n=1,i=t.match(/^#([a-fA-F0-9]{3,4})$/i),a=\"\";if(i){a=(i=i[1])[3];for(var r=0;r<e.length;r++)e[r]=parseInt(i[r]+i[r],16);a&&(n=Math.round(parseInt(a+a,16)/255*100)/100)}else if(i=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){a=i[2],i=i[1];for(r=0;r<e.length;r++)e[r]=parseInt(i.slice(2*r,2*r+2),16);a&&(n=Math.round(parseInt(a,16)/255*100)/100)}else if(i=t.match(/^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i)){for(r=0;r<e.length;r++)e[r]=parseInt(i[r+1]);n=parseFloat(i[4])}else if(i=t.match(/^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i)){for(r=0;r<e.length;r++)e[r]=Math.round(2.55*parseFloat(i[r+1]));n=parseFloat(i[4])}else if(i=t.match(/(\\w+)/)){if(\"transparent\"==i[1])return[0,0,0,0];if(!(e=l[i[1]]))return}for(r=0;r<e.length;r++)e[r]=m(e[r],0,255);return n=n||0==n?m(n,0,1):1,e[3]=n,e}}function h(t){if(t){var e=t.match(/^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/);if(e){var n=parseFloat(e[4]);return[m(parseInt(e[1]),0,360),m(parseFloat(e[2]),0,100),m(parseFloat(e[3]),0,100),m(isNaN(n)?1:n,0,1)]}}}function c(t){if(t){var e=t.match(/^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/);if(e){var n=parseFloat(e[4]);return[m(parseInt(e[1]),0,360),m(parseFloat(e[2]),0,100),m(parseFloat(e[3]),0,100),m(isNaN(n)?1:n,0,1)]}}}function f(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),\"rgba(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+e+\")\"}function g(t,e){return\"rgba(\"+Math.round(t[0]/255*100)+\"%, \"+Math.round(t[1]/255*100)+\"%, \"+Math.round(t[2]/255*100)+\"%, \"+(e||t[3]||1)+\")\"}function p(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),\"hsla(\"+t[0]+\", \"+t[1]+\"%, \"+t[2]+\"%, \"+e+\")\"}function m(t,e,n){return Math.min(Math.max(e,t),n)}function v(t){var e=t.toString(16).toUpperCase();return e.length<2?\"0\"+e:e}var b={};for(var x in l)b[l[x]]=x;var y=function(t){return t instanceof y?t:this instanceof y?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void(\"string\"==typeof t?(e=u.getRgba(t))?this.setValues(\"rgb\",e):(e=u.getHsla(t))?this.setValues(\"hsl\",e):(e=u.getHwb(t))&&this.setValues(\"hwb\",e):\"object\"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues(\"rgb\",e):void 0!==e.l||void 0!==e.lightness?this.setValues(\"hsl\",e):void 0!==e.v||void 0!==e.value?this.setValues(\"hsv\",e):void 0!==e.w||void 0!==e.whiteness?this.setValues(\"hwb\",e):void 0===e.c&&void 0===e.cyan||this.setValues(\"cmyk\",e)))):new y(t);var e};y.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace(\"rgb\",arguments)},hsl:function(){return this.setSpace(\"hsl\",arguments)},hsv:function(){return this.setSpace(\"hsv\",arguments)},hwb:function(){return this.setSpace(\"hwb\",arguments)},cmyk:function(){return this.setSpace(\"cmyk\",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues(\"alpha\",t),this)},red:function(t){return this.setChannel(\"rgb\",0,t)},green:function(t){return this.setChannel(\"rgb\",1,t)},blue:function(t){return this.setChannel(\"rgb\",2,t)},hue:function(t){return t&&(t=(t%=360)<0?360+t:t),this.setChannel(\"hsl\",0,t)},saturation:function(t){return this.setChannel(\"hsl\",1,t)},lightness:function(t){return this.setChannel(\"hsl\",2,t)},saturationv:function(t){return this.setChannel(\"hsv\",1,t)},whiteness:function(t){return this.setChannel(\"hwb\",1,t)},blackness:function(t){return this.setChannel(\"hwb\",2,t)},value:function(t){return this.setChannel(\"hsv\",2,t)},cyan:function(t){return this.setChannel(\"cmyk\",0,t)},magenta:function(t){return this.setChannel(\"cmyk\",1,t)},yellow:function(t){return this.setChannel(\"cmyk\",2,t)},black:function(t){return this.setChannel(\"cmyk\",3,t)},hexString:function(){return u.hexString(this.values.rgb)},rgbString:function(){return u.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return u.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return u.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return u.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return u.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return u.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return u.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?\"AAA\":e>=4.5?\"AA\":\"\"},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues(\"rgb\",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues(\"hsl\",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues(\"hsl\",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues(\"hsl\",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues(\"hsl\",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues(\"hwb\",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues(\"hwb\",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues(\"rgb\",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues(\"alpha\",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues(\"alpha\",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues(\"hsl\",e),this},mix:function(t,e){var n=t,i=void 0===e?.5:e,a=2*i-1,r=this.alpha()-n.alpha(),o=((a*r==-1?a:(a+r)/(1+a*r))+1)/2,s=1-o;return this.rgb(o*this.red()+s*n.red(),o*this.green()+s*n.green(),o*this.blue()+s*n.blue()).alpha(this.alpha()*i+n.alpha()*(1-i))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new y,i=this.values,a=n.values;for(var r in i)i.hasOwnProperty(r)&&(t=i[r],\"[object Array]\"===(e={}.toString.call(t))?a[r]=t.slice(0):\"[object Number]\"===e?a[r]=t:console.error(\"unexpected color value:\",t));return n}},y.prototype.spaces={rgb:[\"red\",\"green\",\"blue\"],hsl:[\"hue\",\"saturation\",\"lightness\"],hsv:[\"hue\",\"saturation\",\"value\"],hwb:[\"hue\",\"whiteness\",\"blackness\"],cmyk:[\"cyan\",\"magenta\",\"yellow\",\"black\"]},y.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},y.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},y.prototype.setValues=function(t,e){var n,i,a=this.values,r=this.spaces,o=this.maxes,l=1;if(this.valid=!0,\"alpha\"===t)l=e;else if(e.length)a[t]=e.slice(0,t.length),l=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)a[t][n]=e[t.charAt(n)];l=e.a}else if(void 0!==e[r[t][0]]){var u=r[t];for(n=0;n<t.length;n++)a[t][n]=e[u[n]];l=e.alpha}if(a.alpha=Math.max(0,Math.min(1,void 0===l?a.alpha:l)),\"alpha\"===t)return!1;for(n=0;n<t.length;n++)i=Math.max(0,Math.min(o[t][n],a[t][n])),a[t][n]=Math.round(i);for(var d in r)d!==t&&(a[d]=s[t][d](a[t]));return!0},y.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):(\"number\"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},y.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:n===i[e]?this:(i[e]=n,this.setValues(t,i),this)},\"undefined\"!=typeof window&&(window.Color=y);var _,k=y,w={noop:function(){},uid:(_=0,function(){return _++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return\"[object\"===e.substr(0,7)&&\"Array]\"===e.substr(-6)},isObject:function(t){return null!==t&&\"[object Object]\"===Object.prototype.toString.call(t)},isFinite:function(t){return(\"number\"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return w.valueOrDefault(w.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&\"function\"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var a,r,o;if(w.isArray(t))if(r=t.length,i)for(a=r-1;a>=0;a--)e.call(n,t[a],a);else for(a=0;a<r;a++)e.call(n,t[a],a);else if(w.isObject(t))for(r=(o=Object.keys(t)).length,a=0;a<r;a++)e.call(n,t[o[a]],o[a])},arrayEquals:function(t,e){var n,i,a,r;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(a=t[n],r=e[n],a instanceof Array&&r instanceof Array){if(!w.arrayEquals(a,r))return!1}else if(a!==r)return!1;return!0},clone:function(t){if(w.isArray(t))return t.map(w.clone);if(w.isObject(t)){for(var e={},n=Object.keys(t),i=n.length,a=0;a<i;++a)e[n[a]]=w.clone(t[n[a]]);return e}return t},_merger:function(t,e,n,i){var a=e[t],r=n[t];w.isObject(a)&&w.isObject(r)?w.merge(a,r,i):e[t]=w.clone(r)},_mergerIf:function(t,e,n){var i=e[t],a=n[t];w.isObject(i)&&w.isObject(a)?w.mergeIf(i,a):e.hasOwnProperty(t)||(e[t]=w.clone(a))},merge:function(t,e,n){var i,a,r,o,s,l=w.isArray(e)?e:[e],u=l.length;if(!w.isObject(t))return t;for(i=(n=n||{}).merger||w._merger,a=0;a<u;++a)if(e=l[a],w.isObject(e))for(s=0,o=(r=Object.keys(e)).length;s<o;++s)i(r[s],t,e,n);return t},mergeIf:function(t,e){return w.merge(t,e,{merger:w._mergerIf})},extend:Object.assign||function(t){return w.merge(t,[].slice.call(arguments,1),{merger:function(t,e,n){e[t]=n[t]}})},inherits:function(t){var e=this,n=t&&t.hasOwnProperty(\"constructor\")?t.constructor:function(){return e.apply(this,arguments)},i=function(){this.constructor=n};return i.prototype=e.prototype,n.prototype=new i,n.extend=w.inherits,t&&w.extend(n.prototype,t),n.__super__=e.prototype,n},_deprecated:function(t,e,n,i){void 0!==e&&console.warn(t+': \"'+n+'\" is deprecated. Please use \"'+i+'\" instead')}},M=w;w.callCallback=w.callback,w.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},w.getValueOrDefault=w.valueOrDefault,w.getValueAtIndexOrDefault=w.valueAtIndexOrDefault;var S={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-((t-=1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return(t-=1)*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return t>=1?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-(t-=1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n||(n=.3),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),-i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n||(n=.3),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.45),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),t<1?i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*-.5:i*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-S.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*S.easeInBounce(2*t):.5*S.easeOutBounce(2*t-1)+.5}},C={effects:S};M.easingEffects=S;var P=Math.PI,A=P/180,D=2*P,T=P/2,I=P/4,F=2*P/3,L={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,a,r){if(r){var o=Math.min(r,a/2,i/2),s=e+o,l=n+o,u=e+i-o,d=n+a-o;t.moveTo(e,l),s<u&&l<d?(t.arc(s,l,o,-P,-T),t.arc(u,l,o,-T,0),t.arc(u,d,o,0,T),t.arc(s,d,o,T,P)):s<u?(t.moveTo(s,n),t.arc(u,l,o,-T,T),t.arc(s,l,o,T,P+T)):l<d?(t.arc(s,l,o,-P,0),t.arc(s,d,o,0,P)):t.arc(s,l,o,-P,P),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,a)},drawPoint:function(t,e,n,i,a,r){var o,s,l,u,d,h=(r||0)*A;if(e&&\"object\"==typeof e&&(\"[object HTMLImageElement]\"===(o=e.toString())||\"[object HTMLCanvasElement]\"===o))return t.save(),t.translate(i,a),t.rotate(h),t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),void t.restore();if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,a,n,0,D),t.closePath();break;case\"triangle\":t.moveTo(i+Math.sin(h)*n,a-Math.cos(h)*n),h+=F,t.lineTo(i+Math.sin(h)*n,a-Math.cos(h)*n),h+=F,t.lineTo(i+Math.sin(h)*n,a-Math.cos(h)*n),t.closePath();break;case\"rectRounded\":u=n-(d=.516*n),s=Math.cos(h+I)*u,l=Math.sin(h+I)*u,t.arc(i-s,a-l,d,h-P,h-T),t.arc(i+l,a-s,d,h-T,h),t.arc(i+s,a+l,d,h,h+T),t.arc(i-l,a+s,d,h+T,h+P),t.closePath();break;case\"rect\":if(!r){u=Math.SQRT1_2*n,t.rect(i-u,a-u,2*u,2*u);break}h+=I;case\"rectRot\":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+l,a-s),t.lineTo(i+s,a+l),t.lineTo(i-l,a+s),t.closePath();break;case\"crossRot\":h+=I;case\"cross\":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s);break;case\"star\":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s),h+=I,s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s);break;case\"line\":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l);break;case\"dash\":t.moveTo(i,a),t.lineTo(i+Math.cos(h)*n,a+Math.sin(h)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var a=n.steppedLine;if(a){if(\"middle\"===a){var r=(e.x+n.x)/2;t.lineTo(r,i?n.y:e.y),t.lineTo(r,i?e.y:n.y)}else\"after\"===a&&!i||\"after\"!==a&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}else n.tension?t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},O=L;M.clear=L.clear,M.drawRoundedRectangle=function(t){t.beginPath(),L.roundedRect.apply(L,arguments)};var R={_set:function(t,e){return M.merge(this[t]||(this[t]={}),e)}};R._set(\"global\",{defaultColor:\"rgba(0,0,0,0.1)\",defaultFontColor:\"#666\",defaultFontFamily:\"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",defaultFontSize:12,defaultFontStyle:\"normal\",defaultLineHeight:1.2,showLines:!0});var z=R,N=M.valueOrDefault;var B={toLineHeight:function(t,e){var n=(\"\"+t).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);if(!n||\"normal\"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case\"px\":return t;case\"%\":t/=100}return e*t},toPadding:function(t){var e,n,i,a;return M.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,a=+t.left||0):e=n=i=a=+t||0,{top:e,right:n,bottom:i,left:a,height:e+i,width:a+n}},_parseFont:function(t){var e=z.global,n=N(t.fontSize,e.defaultFontSize),i={family:N(t.fontFamily,e.defaultFontFamily),lineHeight:M.options.toLineHeight(N(t.lineHeight,e.defaultLineHeight),n),size:n,style:N(t.fontStyle,e.defaultFontStyle),weight:null,string:\"\"};return i.string=function(t){return!t||M.isNullOrUndef(t.size)||M.isNullOrUndef(t.family)?null:(t.style?t.style+\" \":\"\")+(t.weight?t.weight+\" \":\"\")+t.size+\"px \"+t.family}(i),i},resolve:function(t,e,n,i){var a,r,o,s=!0;for(a=0,r=t.length;a<r;++a)if(void 0!==(o=t[a])&&(void 0!==e&&\"function\"==typeof o&&(o=o(e),s=!1),void 0!==n&&M.isArray(o)&&(o=o[n],s=!1),void 0!==o))return i&&!s&&(i.cacheable=!1),o}},E={_factorize:function(t){var e,n=[],i=Math.sqrt(t);for(e=1;e<i;e++)t%e==0&&(n.push(e),n.push(t/e));return i===(0|i)&&n.push(i),n.sort((function(t,e){return t-e})).pop(),n},log10:Math.log10||function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e}},W=E;M.log10=E.log10;var V=M,H=C,j=O,q=B,U=W,Y={getRtlAdapter:function(t,e,n){return t?function(t,e){return{x:function(n){return t+t+e-n},setWidth:function(t){e=t},textAlign:function(t){return\"center\"===t?t:\"right\"===t?\"left\":\"right\"},xPlus:function(t,e){return t-e},leftForLtr:function(t,e){return t-e}}}(e,n):{x:function(t){return t},setWidth:function(t){},textAlign:function(t){return t},xPlus:function(t,e){return t+e},leftForLtr:function(t,e){return t}}},overrideTextDirection:function(t,e){var n,i;\"ltr\"!==e&&\"rtl\"!==e||(i=[(n=t.canvas.style).getPropertyValue(\"direction\"),n.getPropertyPriority(\"direction\")],n.setProperty(\"direction\",e,\"important\"),t.prevTextDirection=i)},restoreTextDirection:function(t){var e=t.prevTextDirection;void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty(\"direction\",e[0],e[1]))}};V.easing=H,V.canvas=j,V.options=q,V.math=U,V.rtl=Y;var G=function(t){V.extend(this,t),this.initialize.apply(this,arguments)};V.extend(G.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=V.extend({},t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,a=e._view;return n&&1!==t?(a||(a=e._view={}),i||(i=e._start={}),function(t,e,n,i){var a,r,o,s,l,u,d,h,c,f=Object.keys(n);for(a=0,r=f.length;a<r;++a)if(u=n[o=f[a]],e.hasOwnProperty(o)||(e[o]=u),(s=e[o])!==u&&\"_\"!==o[0]){if(t.hasOwnProperty(o)||(t[o]=s),(d=typeof u)===typeof(l=t[o]))if(\"string\"===d){if((h=k(l)).valid&&(c=k(u)).valid){e[o]=c.mix(h,i).rgbString();continue}}else if(V.isFinite(l)&&V.isFinite(u)){e[o]=l+(u-l)*i;continue}e[o]=u}}(i,a,n,t),e):(e._view=V.extend({},n),e._start=null,e)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return V.isNumber(this._model.x)&&V.isNumber(this._model.y)}}),G.extend=V.inherits;var X=G,K=X.extend({chart:null,currentStep:0,numSteps:60,easing:\"\",render:null,onAnimationProgress:null,onAnimationComplete:null}),Z=K;Object.defineProperty(K.prototype,\"animationObject\",{get:function(){return this}}),Object.defineProperty(K.prototype,\"chartInstance\",{get:function(){return this.chart},set:function(t){this.chart=t}}),z._set(\"global\",{animation:{duration:1e3,easing:\"easeOutQuart\",onProgress:V.noop,onComplete:V.noop}});var $={animations:[],request:null,addAnimation:function(t,e,n,i){var a,r,o=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),a=0,r=o.length;a<r;++a)if(o[a].chart===t)return void(o[a]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(t){var e=V.findIndex(this.animations,(function(e){return e.chart===t}));-1!==e&&(this.animations.splice(e,1),t.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=V.requestAnimFrame.call(window,(function(){t.request=null,t.startDigest()})))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,i,a=this.animations,r=0;r<a.length;)e=(t=a[r]).chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),V.callback(t.render,[e,t],e),V.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(V.callback(t.onAnimationComplete,[t],e),e.animating=!1,a.splice(r,1)):++r}},J=V.options.resolve,Q=[\"push\",\"pop\",\"shift\",\"splice\",\"unshift\"];function tt(t,e){var n=t._chartjs;if(n){var i=n.listeners,a=i.indexOf(e);-1!==a&&i.splice(a,1),i.length>0||(Q.forEach((function(e){delete t[e]})),delete t._chartjs)}}var et=function(t,e){this.initialize(t,e)};V.extend(et.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:[\"backgroundColor\",\"borderCapStyle\",\"borderColor\",\"borderDash\",\"borderDashOffset\",\"borderJoinStyle\",\"borderWidth\"],_dataElementOptions:[\"backgroundColor\",\"borderColor\",\"borderWidth\",\"pointStyle\"],initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(t){this.index=t},linkScales:function(){var t=this.getMeta(),e=this.chart,n=e.scales,i=this.getDataset(),a=e.options.scales;null!==t.xAxisID&&t.xAxisID in n&&!i.xAxisID||(t.xAxisID=i.xAxisID||a.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in n&&!i.yAxisID||(t.yAxisID=i.yAxisID||a.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&tt(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),i=this.getDataset().data||[],a=n.data;for(t=0,e=i.length;t<e;++t)a[t]=a[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var t,e,n=this,i=n.getDataset(),a=i.data||(i.data=[]);n._data!==a&&(n._data&&tt(n._data,n),a&&Object.isExtensible(a)&&(e=n,(t=a)._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,\"_chartjs\",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),Q.forEach((function(e){var n=\"onData\"+e.charAt(0).toUpperCase()+e.slice(1),i=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),a=i.apply(this,e);return V.each(t._chartjs.listeners,(function(t){\"function\"==typeof t[n]&&t[n].apply(t,e)})),a}})})))),n._data=a),n.resyncElements()},_configure:function(){this._config=V.merge({},[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(t,e,n){\"_meta\"!==t&&\"data\"!==t&&V._merger(t,e,n)}})},_update:function(t){this._configure(),this._cachedDataOpts=null,this.update(t)},update:V.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,a=0;a<i;++a)n[a].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},getStyle:function(t){var e,n=this.getMeta(),i=n.dataset;return this._configure(),i&&void 0===t?e=this._resolveDatasetElementOptions(i||{}):(t=t||0,e=this._resolveDataElementOptions(n.data[t]||{},t)),!1!==e.fill&&null!==e.fill||(e.backgroundColor=e.borderColor),e},_resolveDatasetElementOptions:function(t,e){var n,i,a,r,o=this,s=o.chart,l=o._config,u=t.custom||{},d=s.options.elements[o.datasetElementType.prototype._type]||{},h=o._datasetElementOptions,c={},f={chart:s,dataset:o.getDataset(),datasetIndex:o.index,hover:e};for(n=0,i=h.length;n<i;++n)a=h[n],r=e?\"hover\"+a.charAt(0).toUpperCase()+a.slice(1):a,c[a]=J([u[r],l[r],d[r]],f);return c},_resolveDataElementOptions:function(t,e){var n=this,i=t&&t.custom,a=n._cachedDataOpts;if(a&&!i)return a;var r,o,s,l,u=n.chart,d=n._config,h=u.options.elements[n.dataElementType.prototype._type]||{},c=n._dataElementOptions,f={},g={chart:u,dataIndex:e,dataset:n.getDataset(),datasetIndex:n.index},p={cacheable:!i};if(i=i||{},V.isArray(c))for(o=0,s=c.length;o<s;++o)f[l=c[o]]=J([i[l],d[l],h[l]],g,e,p);else for(o=0,s=(r=Object.keys(c)).length;o<s;++o)f[l=r[o]]=J([i[l],d[c[l]],d[l],h[l]],g,e,p);return p.cacheable&&(n._cachedDataOpts=Object.freeze(f)),f},removeHoverStyle:function(t){V.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},a=t._model,r=V.getHoverColor;t.$previousStyle={backgroundColor:a.backgroundColor,borderColor:a.borderColor,borderWidth:a.borderWidth},a.backgroundColor=J([i.hoverBackgroundColor,e.hoverBackgroundColor,r(a.backgroundColor)],void 0,n),a.borderColor=J([i.hoverBorderColor,e.hoverBorderColor,r(a.borderColor)],void 0,n),a.borderWidth=J([i.hoverBorderWidth,e.hoverBorderWidth,a.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var t=this.getMeta().dataset;t&&this.removeHoverStyle(t)},_setDatasetHoverStyle:function(){var t,e,n,i,a,r,o=this.getMeta().dataset,s={};if(o){for(r=o._model,a=this._resolveDatasetElementOptions(o,!0),t=0,e=(i=Object.keys(a)).length;t<e;++t)s[n=i[t]]=r[n],r[n]=a[n];o.$previousStyle=s}},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,i=e.length;i<n?t.data.splice(i,n-i):i>n&&this.insertElements(n,i-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),et.extend=V.inherits;var nt=et,it=2*Math.PI;function at(t,e){var n=e.startAngle,i=e.endAngle,a=e.pixelMargin,r=a/e.outerRadius,o=e.x,s=e.y;t.beginPath(),t.arc(o,s,e.outerRadius,n-r,i+r),e.innerRadius>a?(r=a/e.innerRadius,t.arc(o,s,e.innerRadius-a,i+r,n-r,!0)):t.arc(o,s,a,i+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip()}function rt(t,e,n){var i=\"inner\"===e.borderAlign;i?(t.lineWidth=2*e.borderWidth,t.lineJoin=\"round\"):(t.lineWidth=e.borderWidth,t.lineJoin=\"bevel\"),n.fullCircles&&function(t,e,n,i){var a,r=n.endAngle;for(i&&(n.endAngle=n.startAngle+it,at(t,n),n.endAngle=r,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=it,n.fullCircles--)),t.beginPath(),t.arc(n.x,n.y,n.innerRadius,n.startAngle+it,n.startAngle,!0),a=0;a<n.fullCircles;++a)t.stroke();for(t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.startAngle+it),a=0;a<n.fullCircles;++a)t.stroke()}(t,e,n,i),i&&at(t,n),t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.endAngle),t.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),t.closePath(),t.stroke()}z._set(\"global\",{elements:{arc:{backgroundColor:z.global.defaultColor,borderColor:\"#fff\",borderWidth:2,borderAlign:\"center\"}}});var ot=X.extend({_type:\"arc\",inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=V.getAngleFromPoint(n,{x:t,y:e}),a=i.angle,r=i.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=it;for(;a>s;)a-=it;for(;a<o;)a+=it;var l=a>=o&&a<=s,u=r>=n.innerRadius&&r<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i=\"inner\"===n.borderAlign?.33:0,a={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-i,0),pixelMargin:i,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/it)};if(e.save(),e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,a.fullCircles){for(a.endAngle=a.startAngle+it,e.beginPath(),e.arc(a.x,a.y,a.outerRadius,a.startAngle,a.endAngle),e.arc(a.x,a.y,a.innerRadius,a.endAngle,a.startAngle,!0),e.closePath(),t=0;t<a.fullCircles;++t)e.fill();a.endAngle=a.startAngle+n.circumference%it}e.beginPath(),e.arc(a.x,a.y,a.outerRadius,a.startAngle,a.endAngle),e.arc(a.x,a.y,a.innerRadius,a.endAngle,a.startAngle,!0),e.closePath(),e.fill(),n.borderWidth&&rt(e,n,a),e.restore()}}),st=V.valueOrDefault,lt=z.global.defaultColor;z._set(\"global\",{elements:{line:{tension:.4,backgroundColor:lt,borderWidth:3,borderColor:lt,borderCapStyle:\"butt\",borderDash:[],borderDashOffset:0,borderJoinStyle:\"miter\",capBezierPoints:!0,fill:!0}}});var ut=X.extend({_type:\"line\",draw:function(){var t,e,n,i=this,a=i._view,r=i._chart.ctx,o=a.spanGaps,s=i._children.slice(),l=z.global,u=l.elements.line,d=-1,h=i._loop;if(s.length){if(i._loop){for(t=0;t<s.length;++t)if(e=V.previousItem(s,t),!s[t]._view.skip&&e._view.skip){s=s.slice(t).concat(s.slice(0,t)),h=o;break}h&&s.push(s[0])}for(r.save(),r.lineCap=a.borderCapStyle||u.borderCapStyle,r.setLineDash&&r.setLineDash(a.borderDash||u.borderDash),r.lineDashOffset=st(a.borderDashOffset,u.borderDashOffset),r.lineJoin=a.borderJoinStyle||u.borderJoinStyle,r.lineWidth=st(a.borderWidth,u.borderWidth),r.strokeStyle=a.borderColor||l.defaultColor,r.beginPath(),(n=s[0]._view).skip||(r.moveTo(n.x,n.y),d=0),t=1;t<s.length;++t)n=s[t]._view,e=-1===d?V.previousItem(s,t):s[d],n.skip||(d!==t-1&&!o||-1===d?r.moveTo(n.x,n.y):V.canvas.lineTo(r,e._view,n),d=t);h&&r.closePath(),r.stroke(),r.restore()}}}),dt=V.valueOrDefault,ht=z.global.defaultColor;function ct(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}z._set(\"global\",{elements:{point:{radius:3,pointStyle:\"circle\",backgroundColor:ht,borderColor:ht,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var ft=X.extend({_type:\"point\",inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:ct,inXRange:ct,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,a=e.rotation,r=e.radius,o=e.x,s=e.y,l=z.global,u=l.defaultColor;e.skip||(void 0===t||V.canvas._isPointInArea(e,t))&&(n.strokeStyle=e.borderColor||u,n.lineWidth=dt(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||u,V.canvas.drawPoint(n,i,r,o,s,a))}}),gt=z.global.defaultColor;function pt(t){return t&&void 0!==t.width}function mt(t){var e,n,i,a,r;return pt(t)?(r=t.width/2,e=t.x-r,n=t.x+r,i=Math.min(t.y,t.base),a=Math.max(t.y,t.base)):(r=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-r,a=t.y+r),{left:e,top:i,right:n,bottom:a}}function vt(t,e,n){return t===e?n:t===n?e:t}function bt(t,e,n){var i,a,r,o,s=t.borderWidth,l=function(t){var e=t.borderSkipped,n={};return e?(t.horizontal?t.base>t.x&&(e=vt(e,\"left\",\"right\")):t.base<t.y&&(e=vt(e,\"bottom\",\"top\")),n[e]=!0,n):n}(t);return V.isObject(s)?(i=+s.top||0,a=+s.right||0,r=+s.bottom||0,o=+s.left||0):i=a=r=o=+s||0,{t:l.top||i<0?0:i>n?n:i,r:l.right||a<0?0:a>e?e:a,b:l.bottom||r<0?0:r>n?n:r,l:l.left||o<0?0:o>e?e:o}}function xt(t,e,n){var i=null===e,a=null===n,r=!(!t||i&&a)&&mt(t);return r&&(i||e>=r.left&&e<=r.right)&&(a||n>=r.top&&n<=r.bottom)}z._set(\"global\",{elements:{rectangle:{backgroundColor:gt,borderColor:gt,borderSkipped:\"bottom\",borderWidth:0}}});var yt=X.extend({_type:\"rectangle\",draw:function(){var t=this._chart.ctx,e=this._view,n=function(t){var e=mt(t),n=e.right-e.left,i=e.bottom-e.top,a=bt(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+a.l,y:e.top+a.t,w:n-a.l-a.r,h:i-a.t-a.b}}}(e),i=n.outer,a=n.inner;t.fillStyle=e.backgroundColor,t.fillRect(i.x,i.y,i.w,i.h),i.w===a.w&&i.h===a.h||(t.save(),t.beginPath(),t.rect(i.x,i.y,i.w,i.h),t.clip(),t.fillStyle=e.borderColor,t.rect(a.x,a.y,a.w,a.h),t.fill(\"evenodd\"),t.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return xt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return pt(n)?xt(n,t,null):xt(n,null,e)},inXRange:function(t){return xt(this._view,t,null)},inYRange:function(t){return xt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return pt(n)?(t=n.x,e=(n.y+n.base)/2):(t=(n.x+n.base)/2,e=n.y),{x:t,y:e}},getArea:function(){var t=this._view;return pt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),_t={},kt=ot,wt=ut,Mt=ft,St=yt;_t.Arc=kt,_t.Line=wt,_t.Point=Mt,_t.Rectangle=St;var Ct=V._deprecated,Pt=V.valueOrDefault;function At(t,e,n){var i,a,r=n.barThickness,o=e.stackCount,s=e.pixels[t],l=V.isNullOrUndef(r)?function(t,e){var n,i,a,r,o=t._length;for(a=1,r=e.length;a<r;++a)o=Math.min(o,Math.abs(e[a]-e[a-1]));for(a=0,r=t.getTicks().length;a<r;++a)i=t.getPixelForTick(a),o=a>0?Math.min(o,Math.abs(i-n)):o,n=i;return o}(e.scale,e.pixels):-1;return V.isNullOrUndef(r)?(i=l*n.categoryPercentage,a=n.barPercentage):(i=r*o,a=1),{chunk:i/o,ratio:a,start:s-i/2}}z._set(\"bar\",{hover:{mode:\"label\"},scales:{xAxes:[{type:\"category\",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:\"linear\"}]}}),z._set(\"global\",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Dt=nt.extend({dataElementType:_t.Rectangle,_dataElementOptions:[\"backgroundColor\",\"borderColor\",\"borderSkipped\",\"borderWidth\",\"barPercentage\",\"barThickness\",\"categoryPercentage\",\"maxBarThickness\",\"minBarLength\"],initialize:function(){var t,e,n=this;nt.prototype.initialize.apply(n,arguments),(t=n.getMeta()).stack=n.getDataset().stack,t.bar=!0,e=n._getIndexScale().options,Ct(\"bar chart\",e.barPercentage,\"scales.[x/y]Axes.barPercentage\",\"dataset.barPercentage\"),Ct(\"bar chart\",e.barThickness,\"scales.[x/y]Axes.barThickness\",\"dataset.barThickness\"),Ct(\"bar chart\",e.categoryPercentage,\"scales.[x/y]Axes.categoryPercentage\",\"dataset.categoryPercentage\"),Ct(\"bar chart\",n._getValueScale().options.minBarLength,\"scales.[x/y]Axes.minBarLength\",\"dataset.minBarLength\"),Ct(\"bar chart\",e.maxBarThickness,\"scales.[x/y]Axes.maxBarThickness\",\"dataset.maxBarThickness\")},update:function(t){var e,n,i=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=i.length;e<n;++e)this.updateElement(i[e],e,t)},updateElement:function(t,e,n){var i=this,a=i.getMeta(),r=i.getDataset(),o=i._resolveDataElementOptions(t,e);t._xScale=i.getScaleForId(a.xAxisID),t._yScale=i.getScaleForId(a.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:r.label,label:i.chart.data.labels[e]},V.isArray(r.data[e])&&(t._model.borderSkipped=null),i._updateElementGeometry(t,e,n,o),t.pivot()},_updateElementGeometry:function(t,e,n,i){var a=this,r=t._model,o=a._getValueScale(),s=o.getBasePixel(),l=o.isHorizontal(),u=a._ruler||a.getRuler(),d=a.calculateBarValuePixels(a.index,e,i),h=a.calculateBarIndexPixels(a.index,e,u,i);r.horizontal=l,r.base=n?s:d.base,r.x=l?n?s:d.head:h.center,r.y=l?h.center:n?s:d.head,r.height=l?h.size:void 0,r.width=l?void 0:h.size},_getStacks:function(t){var e,n,i=this._getIndexScale(),a=i._getMatchingVisibleMetas(this._type),r=i.options.stacked,o=a.length,s=[];for(e=0;e<o&&(n=a[e],(!1===r||-1===s.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&s.push(n.stack),n.index!==t);++e);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return-1===i?n.length-1:i},getRuler:function(){var t,e,n=this._getIndexScale(),i=[];for(t=0,e=this.getMeta().data.length;t<e;++t)i.push(n.getPixelForValue(null,t,this.index));return{pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this.getStackCount(),scale:n}},calculateBarValuePixels:function(t,e,n){var i,a,r,o,s,l,u,d=this.chart,h=this._getValueScale(),c=h.isHorizontal(),f=d.data.datasets,g=h._getMatchingVisibleMetas(this._type),p=h._parseValue(f[t].data[e]),m=n.minBarLength,v=h.options.stacked,b=this.getMeta().stack,x=void 0===p.start?0:p.max>=0&&p.min>=0?p.min:p.max,y=void 0===p.start?p.end:p.max>=0&&p.min>=0?p.max-p.min:p.min-p.max,_=g.length;if(v||void 0===v&&void 0!==b)for(i=0;i<_&&(a=g[i]).index!==t;++i)a.stack===b&&(r=void 0===(u=h._parseValue(f[a.index].data[e])).start?u.end:u.min>=0&&u.max>=0?u.max:u.min,(p.min<0&&r<0||p.max>=0&&r>0)&&(x+=r));return o=h.getPixelForValue(x),l=(s=h.getPixelForValue(x+y))-o,void 0!==m&&Math.abs(l)<m&&(l=m,s=y>=0&&!c||y<0&&c?o-m:o+m),{size:l,base:o,head:s,center:s+l/2}},calculateBarIndexPixels:function(t,e,n,i){var a=\"flex\"===i.barThickness?function(t,e,n){var i,a=e.pixels,r=a[t],o=t>0?a[t-1]:null,s=t<a.length-1?a[t+1]:null,l=n.categoryPercentage;return null===o&&(o=r-(null===s?e.end-e.start:s-r)),null===s&&(s=r+r-o),i=r-(r-Math.min(o,s))/2*l,{chunk:Math.abs(s-o)/2*l/e.stackCount,ratio:n.barPercentage,start:i}}(e,n,i):At(e,n,i),r=this.getStackIndex(t,this.getMeta().stack),o=a.start+a.chunk*r+a.chunk/2,s=Math.min(Pt(i.maxBarThickness,1/0),a.chunk*a.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,i=this.getDataset(),a=n.length,r=0;for(V.canvas.clipArea(t.ctx,t.chartArea);r<a;++r){var o=e._parseValue(i.data[r]);isNaN(o.min)||isNaN(o.max)||n[r].draw()}V.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var t=this,e=V.extend({},nt.prototype._resolveDataElementOptions.apply(t,arguments)),n=t._getIndexScale().options,i=t._getValueScale().options;return e.barPercentage=Pt(n.barPercentage,e.barPercentage),e.barThickness=Pt(n.barThickness,e.barThickness),e.categoryPercentage=Pt(n.categoryPercentage,e.categoryPercentage),e.maxBarThickness=Pt(n.maxBarThickness,e.maxBarThickness),e.minBarLength=Pt(i.minBarLength,e.minBarLength),e}}),Tt=V.valueOrDefault,It=V.options.resolve;z._set(\"bubble\",{hover:{mode:\"single\"},scales:{xAxes:[{type:\"linear\",position:\"bottom\",id:\"x-axis-0\"}],yAxes:[{type:\"linear\",position:\"left\",id:\"y-axis-0\"}]},tooltips:{callbacks:{title:function(){return\"\"},label:function(t,e){var n=e.datasets[t.datasetIndex].label||\"\",i=e.datasets[t.datasetIndex].data[t.index];return n+\": (\"+t.xLabel+\", \"+t.yLabel+\", \"+i.r+\")\"}}}});var Ft=nt.extend({dataElementType:_t.Point,_dataElementOptions:[\"backgroundColor\",\"borderColor\",\"borderWidth\",\"hoverBackgroundColor\",\"hoverBorderColor\",\"hoverBorderWidth\",\"hoverRadius\",\"hitRadius\",\"pointStyle\",\"rotation\"],update:function(t){var e=this,n=e.getMeta().data;V.each(n,(function(n,i){e.updateElement(n,i,t)}))},updateElement:function(t,e,n){var i=this,a=i.getMeta(),r=t.custom||{},o=i.getScaleForId(a.xAxisID),s=i.getScaleForId(a.yAxisID),l=i._resolveDataElementOptions(t,e),u=i.getDataset().data[e],d=i.index,h=n?o.getPixelForDecimal(.5):o.getPixelForValue(\"object\"==typeof u?u:NaN,e,d),c=n?s.getBasePixel():s.getPixelForValue(u,e,d);t._xScale=o,t._yScale=s,t._options=l,t._datasetIndex=d,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:r.skip||isNaN(h)||isNaN(c),x:h,y:c},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=V.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Tt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Tt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Tt(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(t,e){var n=this,i=n.chart,a=n.getDataset(),r=t.custom||{},o=a.data[e]||{},s=nt.prototype._resolveDataElementOptions.apply(n,arguments),l={chart:i,dataIndex:e,dataset:a,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=V.extend({},s)),s.radius=It([r.radius,o.r,n._config.radius,i.options.elements.point.radius],l,e),s}}),Lt=V.valueOrDefault,Ot=Math.PI,Rt=2*Ot,zt=Ot/2;z._set(\"doughnut\",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:\"single\"},legendCallback:function(t){var e,n,i,a=document.createElement(\"ul\"),r=t.data,o=r.datasets,s=r.labels;if(a.setAttribute(\"class\",t.id+\"-legend\"),o.length)for(e=0,n=o[0].data.length;e<n;++e)(i=a.appendChild(document.createElement(\"li\"))).appendChild(document.createElement(\"span\")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return a.outerHTML},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map((function(n,i){var a=t.getDatasetMeta(0),r=a.controller.getStyle(i);return{text:n,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(e.datasets[0].data[i])||a.data[i].hidden,index:i}})):[]}},onClick:function(t,e){var n,i,a,r=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(a=o.getDatasetMeta(n)).data[r]&&(a.data[r].hidden=!a.data[r].hidden);o.update()}},cutoutPercentage:50,rotation:-zt,circumference:Rt,tooltips:{callbacks:{title:function(){return\"\"},label:function(t,e){var n=e.labels[t.index],i=\": \"+e.datasets[t.datasetIndex].data[t.index];return V.isArray(n)?(n=n.slice())[0]+=i:n+=i,n}}}});var Nt=nt.extend({dataElementType:_t.Arc,linkScales:V.noop,_dataElementOptions:[\"backgroundColor\",\"borderColor\",\"borderWidth\",\"borderAlign\",\"hoverBackgroundColor\",\"hoverBorderColor\",\"hoverBorderWidth\"],getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i,a,r=this,o=r.chart,s=o.chartArea,l=o.options,u=1,d=1,h=0,c=0,f=r.getMeta(),g=f.data,p=l.cutoutPercentage/100||0,m=l.circumference,v=r._getRingWeight(r.index);if(m<Rt){var b=l.rotation%Rt,x=(b+=b>=Ot?-Rt:b<-Ot?Rt:0)+m,y=Math.cos(b),_=Math.sin(b),k=Math.cos(x),w=Math.sin(x),M=b<=0&&x>=0||x>=Rt,S=b<=zt&&x>=zt||x>=Rt+zt,C=b<=-zt&&x>=-zt||x>=Ot+zt,P=b===-Ot||x>=Ot?-1:Math.min(y,y*p,k,k*p),A=C?-1:Math.min(_,_*p,w,w*p),D=M?1:Math.max(y,y*p,k,k*p),T=S?1:Math.max(_,_*p,w,w*p);u=(D-P)/2,d=(T-A)/2,h=-(D+P)/2,c=-(T+A)/2}for(i=0,a=g.length;i<a;++i)g[i]._options=r._resolveDataElementOptions(g[i],i);for(o.borderWidth=r.getMaxBorderWidth(),e=(s.right-s.left-o.borderWidth)/u,n=(s.bottom-s.top-o.borderWidth)/d,o.outerRadius=Math.max(Math.min(e,n)/2,0),o.innerRadius=Math.max(o.outerRadius*p,0),o.radiusLength=(o.outerRadius-o.innerRadius)/(r._getVisibleDatasetWeightTotal()||1),o.offsetX=h*o.outerRadius,o.offsetY=c*o.outerRadius,f.total=r.calculateTotal(),r.outerRadius=o.outerRadius-o.radiusLength*r._getRingWeightOffset(r.index),r.innerRadius=Math.max(r.outerRadius-o.radiusLength*v,0),i=0,a=g.length;i<a;++i)r.updateElement(g[i],i,t)},updateElement:function(t,e,n){var i=this,a=i.chart,r=a.chartArea,o=a.options,s=o.animation,l=(r.left+r.right)/2,u=(r.top+r.bottom)/2,d=o.rotation,h=o.rotation,c=i.getDataset(),f=n&&s.animateRotate?0:t.hidden?0:i.calculateCircumference(c.data[e])*(o.circumference/Rt),g=n&&s.animateScale?0:i.innerRadius,p=n&&s.animateScale?0:i.outerRadius,m=t._options||{};V.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,borderAlign:m.borderAlign,x:l+a.offsetX,y:u+a.offsetY,startAngle:d,endAngle:h,circumference:f,outerRadius:p,innerRadius:g,label:V.valueAtIndexOrDefault(c.label,e,a.data.labels[e])}});var v=t._model;n&&s.animateRotate||(v.startAngle=0===e?o.rotation:i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var t,e=this.getDataset(),n=this.getMeta(),i=0;return V.each(n.data,(function(n,a){t=e.data[a],isNaN(t)||n.hidden||(i+=Math.abs(t))})),i},calculateCircumference:function(t){var e=this.getMeta().total;return e>0&&!isNaN(t)?Rt*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,a,r,o,s,l,u=0,d=this.chart;if(!t)for(e=0,n=d.data.datasets.length;e<n;++e)if(d.isDatasetVisible(e)){t=(i=d.getDatasetMeta(e)).data,e!==this.index&&(r=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)a=t[e],r?(r._configure(),o=r._resolveDataElementOptions(a,e)):o=a._options,\"inner\"!==o.borderAlign&&(s=o.borderWidth,u=(l=o.hoverBorderWidth)>(u=s>u?s:u)?l:u);return u},setHoverStyle:function(t){var e=t._model,n=t._options,i=V.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=Lt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Lt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Lt(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(Lt(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});z._set(\"horizontalBar\",{hover:{mode:\"index\",axis:\"y\"},scales:{xAxes:[{type:\"linear\",position:\"bottom\"}],yAxes:[{type:\"category\",position:\"left\",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:\"left\"}},tooltips:{mode:\"index\",axis:\"y\"}}),z._set(\"global\",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Bt=Dt.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Et=V.valueOrDefault,Wt=V.options.resolve,Vt=V.canvas._isPointInArea;function Ht(t,e){var n=t&&t.options.ticks||{},i=n.reverse,a=void 0===n.min?e:0,r=void 0===n.max?e:0;return{start:i?r:a,end:i?a:r}}function jt(t,e,n){var i=n/2,a=Ht(t,i),r=Ht(e,i);return{top:r.end,right:a.end,bottom:r.start,left:a.start}}function qt(t){var e,n,i,a;return V.isObject(t)?(e=t.top,n=t.right,i=t.bottom,a=t.left):e=n=i=a=t,{top:e,right:n,bottom:i,left:a}}z._set(\"line\",{showLines:!0,spanGaps:!1,hover:{mode:\"label\"},scales:{xAxes:[{type:\"category\",id:\"x-axis-0\"}],yAxes:[{type:\"linear\",id:\"y-axis-0\"}]}});var Ut=nt.extend({datasetElementType:_t.Line,dataElementType:_t.Point,_datasetElementOptions:[\"backgroundColor\",\"borderCapStyle\",\"borderColor\",\"borderDash\",\"borderDashOffset\",\"borderJoinStyle\",\"borderWidth\",\"cubicInterpolationMode\",\"fill\"],_dataElementOptions:{backgroundColor:\"pointBackgroundColor\",borderColor:\"pointBorderColor\",borderWidth:\"pointBorderWidth\",hitRadius:\"pointHitRadius\",hoverBackgroundColor:\"pointHoverBackgroundColor\",hoverBorderColor:\"pointHoverBorderColor\",hoverBorderWidth:\"pointHoverBorderWidth\",hoverRadius:\"pointHoverRadius\",pointStyle:\"pointStyle\",radius:\"pointRadius\",rotation:\"pointRotation\"},update:function(t){var e,n,i=this,a=i.getMeta(),r=a.dataset,o=a.data||[],s=i.chart.options,l=i._config,u=i._showLine=Et(l.showLine,s.showLines);for(i._xScale=i.getScaleForId(a.xAxisID),i._yScale=i.getScaleForId(a.yAxisID),u&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),r._scale=i._yScale,r._datasetIndex=i.index,r._children=o,r._model=i._resolveDatasetElementOptions(r),r.pivot()),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(u&&0!==r._model.tension&&i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i,a,r=this,o=r.getMeta(),s=t.custom||{},l=r.getDataset(),u=r.index,d=l.data[e],h=r._xScale,c=r._yScale,f=o.dataset._model,g=r._resolveDataElementOptions(t,e);i=h.getPixelForValue(\"object\"==typeof d?d:NaN,e,u),a=n?c.getBasePixel():r.calculatePointY(d,e,u),t._xScale=h,t._yScale=c,t._options=g,t._datasetIndex=u,t._index=e,t._model={x:i,y:a,skip:s.skip||isNaN(i)||isNaN(a),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:Et(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolveDatasetElementOptions:function(t){var e=this,n=e._config,i=t.custom||{},a=e.chart.options,r=a.elements.line,o=nt.prototype._resolveDatasetElementOptions.apply(e,arguments);return o.spanGaps=Et(n.spanGaps,a.spanGaps),o.tension=Et(n.lineTension,r.tension),o.steppedLine=Wt([i.steppedLine,n.steppedLine,r.stepped]),o.clip=qt(Et(n.clip,jt(e._xScale,e._yScale,o.borderWidth))),o},calculatePointY:function(t,e,n){var i,a,r,o,s,l,u,d=this.chart,h=this._yScale,c=0,f=0;if(h.options.stacked){for(s=+h.getRightValue(t),u=(l=d._getSortedVisibleDatasetMetas()).length,i=0;i<u&&(r=l[i]).index!==n;++i)a=d.data.datasets[r.index],\"line\"===r.type&&r.yAxisID===h.id&&((o=+h.getRightValue(a.data[e]))<0?f+=o||0:c+=o||0);return s<0?h.getPixelForValue(f+s):h.getPixelForValue(c+s)}return h.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,i,a=this.chart,r=this.getMeta(),o=r.dataset._model,s=a.chartArea,l=r.data||[];function u(t,e,n){return Math.max(Math.min(t,n),e)}if(o.spanGaps&&(l=l.filter((function(t){return!t._model.skip}))),\"monotone\"===o.cubicInterpolationMode)V.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,i=V.splineCurve(V.previousItem(l,t)._model,n,V.nextItem(l,t)._model,o.tension),n.controlPointPreviousX=i.previous.x,n.controlPointPreviousY=i.previous.y,n.controlPointNextX=i.next.x,n.controlPointNextY=i.next.y;if(a.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,Vt(n,s)&&(t>0&&Vt(l[t-1]._model,s)&&(n.controlPointPreviousX=u(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=u(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&Vt(l[t+1]._model,s)&&(n.controlPointNextX=u(n.controlPointNextX,s.left,s.right),n.controlPointNextY=u(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),i=n.data||[],a=e.chartArea,r=e.canvas,o=0,s=i.length;for(this._showLine&&(t=n.dataset._model.clip,V.canvas.clipArea(e.ctx,{left:!1===t.left?0:a.left-t.left,right:!1===t.right?r.width:a.right+t.right,top:!1===t.top?0:a.top-t.top,bottom:!1===t.bottom?r.height:a.bottom+t.bottom}),n.dataset.draw(),V.canvas.unclipArea(e.ctx));o<s;++o)i[o].draw(a)},setHoverStyle:function(t){var e=t._model,n=t._options,i=V.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Et(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Et(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Et(n.hoverBorderWidth,n.borderWidth),e.radius=Et(n.hoverRadius,n.radius)}}),Yt=V.options.resolve;z._set(\"polarArea\",{scale:{type:\"radialLinear\",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e,n,i,a=document.createElement(\"ul\"),r=t.data,o=r.datasets,s=r.labels;if(a.setAttribute(\"class\",t.id+\"-legend\"),o.length)for(e=0,n=o[0].data.length;e<n;++e)(i=a.appendChild(document.createElement(\"li\"))).appendChild(document.createElement(\"span\")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return a.outerHTML},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map((function(n,i){var a=t.getDatasetMeta(0),r=a.controller.getStyle(i);return{text:n,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(e.datasets[0].data[i])||a.data[i].hidden,index:i}})):[]}},onClick:function(t,e){var n,i,a,r=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(a=o.getDatasetMeta(n)).data[r].hidden=!a.data[r].hidden;o.update()}},tooltips:{callbacks:{title:function(){return\"\"},label:function(t,e){return e.labels[t.index]+\": \"+t.yLabel}}}});var Gt=nt.extend({dataElementType:_t.Arc,linkScales:V.noop,_dataElementOptions:[\"backgroundColor\",\"borderColor\",\"borderWidth\",\"borderAlign\",\"hoverBackgroundColor\",\"hoverBorderColor\",\"hoverBorderWidth\"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i,a=this,r=a.getDataset(),o=a.getMeta(),s=a.chart.options.startAngle||0,l=a._starts=[],u=a._angles=[],d=o.data;for(a._updateRadius(),o.count=a.countVisibleElements(),e=0,n=r.data.length;e<n;e++)l[e]=s,i=a._computeAngle(e),u[e]=i,s+=i;for(e=0,n=d.length;e<n;++e)d[e]._options=a._resolveDataElementOptions(d[e],e),a.updateElement(d[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,a=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(a/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,a=i.chart,r=i.getDataset(),o=a.options,s=o.animation,l=a.scale,u=a.data.labels,d=l.xCenter,h=l.yCenter,c=o.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(r.data[e]),g=i._starts[e],p=g+(t.hidden?0:i._angles[e]),m=s.animateScale?0:l.getDistanceFromCenterForValue(r.data[e]),v=t._options||{};V.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:d,y:h,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?c:g,endAngle:n&&s.animateRotate?c:p,label:V.valueAtIndexOrDefault(u,e,u[e])}}),t.pivot()},countVisibleElements:function(){var t=this.getDataset(),e=this.getMeta(),n=0;return V.each(e.data,(function(e,i){isNaN(t.data[i])||e.hidden||n++})),n},setHoverStyle:function(t){var e=t._model,n=t._options,i=V.getHoverColor,a=V.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=a(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=a(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=a(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),a=e.getMeta();if(isNaN(i.data[t])||a.data[t].hidden)return 0;var r={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return Yt([e.chart.options.elements.arc.angle,2*Math.PI/n],r,t)}});z._set(\"pie\",V.clone(z.doughnut)),z._set(\"pie\",{cutoutPercentage:0});var Xt=Nt,Kt=V.valueOrDefault;z._set(\"radar\",{spanGaps:!1,scale:{type:\"radialLinear\"},elements:{line:{fill:\"start\",tension:0}}});var Zt=nt.extend({datasetElementType:_t.Line,dataElementType:_t.Point,linkScales:V.noop,_datasetElementOptions:[\"backgroundColor\",\"borderWidth\",\"borderColor\",\"borderCapStyle\",\"borderDash\",\"borderDashOffset\",\"borderJoinStyle\",\"fill\"],_dataElementOptions:{backgroundColor:\"pointBackgroundColor\",borderColor:\"pointBorderColor\",borderWidth:\"pointBorderWidth\",hitRadius:\"pointHitRadius\",hoverBackgroundColor:\"pointHoverBackgroundColor\",hoverBorderColor:\"pointHoverBorderColor\",hoverBorderWidth:\"pointHoverBorderWidth\",hoverRadius:\"pointHoverRadius\",pointStyle:\"pointStyle\",radius:\"pointRadius\",rotation:\"pointRotation\"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i=this,a=i.getMeta(),r=a.dataset,o=a.data||[],s=i.chart.scale,l=i._config;for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),r._scale=s,r._datasetIndex=i.index,r._children=o,r._loop=!0,r._model=i._resolveDatasetElementOptions(r),r.pivot(),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i=this,a=t.custom||{},r=i.getDataset(),o=i.chart.scale,s=o.getPointPositionForValue(e,r.data[e]),l=i._resolveDataElementOptions(t,e),u=i.getMeta().dataset._model,d=n?o.xCenter:s.x,h=n?o.yCenter:s.y;t._scale=o,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:d,y:h,skip:a.skip||isNaN(d)||isNaN(h),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:Kt(a.tension,u?u.tension:0),hitRadius:l.hitRadius}},_resolveDatasetElementOptions:function(){var t=this,e=t._config,n=t.chart.options,i=nt.prototype._resolveDatasetElementOptions.apply(t,arguments);return i.spanGaps=Kt(e.spanGaps,n.spanGaps),i.tension=Kt(e.lineTension,n.elements.line.tension),i},updateBezierControlPoints:function(){var t,e,n,i,a=this.getMeta(),r=this.chart.chartArea,o=a.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(a.dataset._model.spanGaps&&(o=o.filter((function(t){return!t._model.skip}))),t=0,e=o.length;t<e;++t)n=o[t]._model,i=V.splineCurve(V.previousItem(o,t,!0)._model,n,V.nextItem(o,t,!0)._model,n.tension),n.controlPointPreviousX=s(i.previous.x,r.left,r.right),n.controlPointPreviousY=s(i.previous.y,r.top,r.bottom),n.controlPointNextX=s(i.next.x,r.left,r.right),n.controlPointNextY=s(i.next.y,r.top,r.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=V.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Kt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Kt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Kt(n.hoverBorderWidth,n.borderWidth),e.radius=Kt(n.hoverRadius,n.radius)}});z._set(\"scatter\",{hover:{mode:\"single\"},scales:{xAxes:[{id:\"x-axis-1\",type:\"linear\",position:\"bottom\"}],yAxes:[{id:\"y-axis-1\",type:\"linear\",position:\"left\"}]},tooltips:{callbacks:{title:function(){return\"\"},label:function(t){return\"(\"+t.xLabel+\", \"+t.yLabel+\")\"}}}}),z._set(\"global\",{datasets:{scatter:{showLine:!1}}});var $t={bar:Dt,bubble:Ft,doughnut:Nt,horizontalBar:Bt,line:Ut,polarArea:Gt,pie:Xt,radar:Zt,scatter:Ut};function Jt(t,e){return t.native?{x:t.x,y:t.y}:V.getRelativePosition(t,e)}function Qt(t,e){var n,i,a,r,o,s,l=t._getSortedVisibleDatasetMetas();for(i=0,r=l.length;i<r;++i)for(a=0,o=(n=l[i].data).length;a<o;++a)(s=n[a])._view.skip||e(s)}function te(t,e){var n=[];return Qt(t,(function(t){t.inRange(e.x,e.y)&&n.push(t)})),n}function ee(t,e,n,i){var a=Number.POSITIVE_INFINITY,r=[];return Qt(t,(function(t){if(!n||t.inRange(e.x,e.y)){var o=t.getCenterPoint(),s=i(e,o);s<a?(r=[t],a=s):s===a&&r.push(t)}})),r}function ne(t){var e=-1!==t.indexOf(\"x\"),n=-1!==t.indexOf(\"y\");return function(t,i){var a=e?Math.abs(t.x-i.x):0,r=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(a,2)+Math.pow(r,2))}}function ie(t,e,n){var i=Jt(e,t);n.axis=n.axis||\"x\";var a=ne(n.axis),r=n.intersect?te(t,i):ee(t,i,!1,a),o=[];return r.length?(t._getSortedVisibleDatasetMetas().forEach((function(t){var e=t.data[r[0]._index];e&&!e._view.skip&&o.push(e)})),o):[]}var ae={modes:{single:function(t,e){var n=Jt(e,t),i=[];return Qt(t,(function(t){if(t.inRange(n.x,n.y))return i.push(t),i})),i.slice(0,1)},label:ie,index:ie,dataset:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||\"xy\";var a=ne(n.axis),r=n.intersect?te(t,i):ee(t,i,!1,a);return r.length>0&&(r=t.getDatasetMeta(r[0]._datasetIndex).data),r},\"x-axis\":function(t,e){return ie(t,e,{intersect:!1})},point:function(t,e){return te(t,Jt(e,t))},nearest:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||\"xy\";var a=ne(n.axis);return ee(t,i,n.intersect,a)},x:function(t,e,n){var i=Jt(e,t),a=[],r=!1;return Qt(t,(function(t){t.inXRange(i.x)&&a.push(t),t.inRange(i.x,i.y)&&(r=!0)})),n.intersect&&!r&&(a=[]),a},y:function(t,e,n){var i=Jt(e,t),a=[],r=!1;return Qt(t,(function(t){t.inYRange(i.y)&&a.push(t),t.inRange(i.x,i.y)&&(r=!0)})),n.intersect&&!r&&(a=[]),a}}},re=V.extend;function oe(t,e){return V.where(t,(function(t){return t.pos===e}))}function se(t,e){return t.sort((function(t,n){var i=e?n:t,a=e?t:n;return i.weight===a.weight?i.index-a.index:i.weight-a.weight}))}function le(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function ue(t,e,n){var i,a,r=n.box,o=t.maxPadding;if(n.size&&(t[n.pos]-=n.size),n.size=n.horizontal?r.height:r.width,t[n.pos]+=n.size,r.getPadding){var s=r.getPadding();o.top=Math.max(o.top,s.top),o.left=Math.max(o.left,s.left),o.bottom=Math.max(o.bottom,s.bottom),o.right=Math.max(o.right,s.right)}if(i=e.outerWidth-le(o,t,\"left\",\"right\"),a=e.outerHeight-le(o,t,\"top\",\"bottom\"),i!==t.w||a!==t.h)return t.w=i,t.h=a,n.horizontal?i!==t.w:a!==t.h}function de(t,e){var n=e.maxPadding;function i(t){var i={left:0,top:0,right:0,bottom:0};return t.forEach((function(t){i[t]=Math.max(e[t],n[t])})),i}return i(t?[\"left\",\"right\"]:[\"top\",\"bottom\"])}function he(t,e,n){var i,a,r,o,s,l,u=[];for(i=0,a=t.length;i<a;++i)(o=(r=t[i]).box).update(r.width||e.w,r.height||e.h,de(r.horizontal,e)),ue(e,n,r)&&(l=!0,u.length&&(s=!0)),o.fullWidth||u.push(r);return s&&he(u,e,n)||l}function ce(t,e,n){var i,a,r,o,s=n.padding,l=e.x,u=e.y;for(i=0,a=t.length;i<a;++i)o=(r=t[i]).box,r.horizontal?(o.left=o.fullWidth?s.left:e.left,o.right=o.fullWidth?n.outerWidth-s.right:e.left+e.w,o.top=u,o.bottom=u+o.height,o.width=o.right-o.left,u=o.bottom):(o.left=l,o.right=l+o.width,o.top=e.top,o.bottom=e.top+e.h,o.height=o.bottom-o.top,l=o.right);e.x=l,e.y=u}z._set(\"global\",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var fe,ge={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||\"top\",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw:function(){e.draw.apply(e,arguments)}}]},t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,a=[\"fullWidth\",\"position\",\"weight\"],r=a.length,o=0;o<r;++o)i=a[o],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(t,e,n){if(t){var i=t.options.layout||{},a=V.options.toPadding(i.padding),r=e-a.width,o=n-a.height,s=function(t){var e=function(t){var e,n,i,a=[];for(e=0,n=(t||[]).length;e<n;++e)i=t[e],a.push({index:e,box:i,pos:i.position,horizontal:i.isHorizontal(),weight:i.weight});return a}(t),n=se(oe(e,\"left\"),!0),i=se(oe(e,\"right\")),a=se(oe(e,\"top\"),!0),r=se(oe(e,\"bottom\"));return{leftAndTop:n.concat(a),rightAndBottom:i.concat(r),chartArea:oe(e,\"chartArea\"),vertical:n.concat(i),horizontal:a.concat(r)}}(t.boxes),l=s.vertical,u=s.horizontal,d=Object.freeze({outerWidth:e,outerHeight:n,padding:a,availableWidth:r,vBoxMaxWidth:r/2/l.length,hBoxMaxHeight:o/2}),h=re({maxPadding:re({},a),w:r,h:o,x:a.left,y:a.top},a);!function(t,e){var n,i,a;for(n=0,i=t.length;n<i;++n)(a=t[n]).width=a.horizontal?a.box.fullWidth&&e.availableWidth:e.vBoxMaxWidth,a.height=a.horizontal&&e.hBoxMaxHeight}(l.concat(u),d),he(l,h,d),he(u,h,d)&&he(l,h,d),function(t){var e=t.maxPadding;function n(n){var i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n(\"top\"),t.x+=n(\"left\"),n(\"right\"),n(\"bottom\")}(h),ce(s.leftAndTop,h,d),h.x+=h.w,h.y+=h.h,ce(s.rightAndBottom,h,d),t.chartArea={left:h.left,top:h.top,right:h.left+h.w,bottom:h.top+h.h},V.each(s.chartArea,(function(e){var n=e.box;re(n,t.chartArea),n.update(h.w,h.h)}))}}},pe=(fe=Object.freeze({__proto__:null,default:\"@keyframes chartjs-render-animation{from{opacity:.99}to{opacity:1}}.chartjs-render-monitor{animation:chartjs-render-animation 1ms}.chartjs-size-monitor,.chartjs-size-monitor-expand,.chartjs-size-monitor-shrink{position:absolute;direction:ltr;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1}.chartjs-size-monitor-expand>div{position:absolute;width:1000000px;height:1000000px;left:0;top:0}.chartjs-size-monitor-shrink>div{position:absolute;width:200%;height:200%;left:0;top:0}\"}))&&fe.default||fe,me=\"$chartjs\",ve=\"chartjs-size-monitor\",be=\"chartjs-render-monitor\",xe=\"chartjs-render-animation\",ye=[\"animationstart\",\"webkitAnimationStart\"],_e={touchstart:\"mousedown\",touchmove:\"mousemove\",touchend:\"mouseup\",pointerenter:\"mouseenter\",pointerdown:\"mousedown\",pointermove:\"mousemove\",pointerup:\"mouseup\",pointerleave:\"mouseout\",pointerout:\"mouseout\"};function ke(t,e){var n=V.getStyle(t,e),i=n&&n.match(/^(\\d+)(\\.\\d+)?px$/);return i?Number(i[1]):void 0}var we=!!function(){var t=!1;try{var e=Object.defineProperty({},\"passive\",{get:function(){t=!0}});window.addEventListener(\"e\",null,e)}catch(t){}return t}()&&{passive:!0};function Me(t,e,n){t.addEventListener(e,n,we)}function Se(t,e,n){t.removeEventListener(e,n,we)}function Ce(t,e,n,i,a){return{type:t,chart:e,native:a||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function Pe(t){var e=document.createElement(\"div\");return e.className=t||\"\",e}function Ae(t,e,n){var i,a,r,o,s=t[me]||(t[me]={}),l=s.resizer=function(t){var e=Pe(ve),n=Pe(ve+\"-expand\"),i=Pe(ve+\"-shrink\");n.appendChild(Pe()),i.appendChild(Pe()),e.appendChild(n),e.appendChild(i),e._reset=function(){n.scrollLeft=1e6,n.scrollTop=1e6,i.scrollLeft=1e6,i.scrollTop=1e6};var a=function(){e._reset(),t()};return Me(n,\"scroll\",a.bind(n,\"expand\")),Me(i,\"scroll\",a.bind(i,\"shrink\")),e}((i=function(){if(s.resizer){var i=n.options.maintainAspectRatio&&t.parentNode,a=i?i.clientWidth:0;e(Ce(\"resize\",n)),i&&i.clientWidth<a&&n.canvas&&e(Ce(\"resize\",n))}},r=!1,o=[],function(){o=Array.prototype.slice.call(arguments),a=a||this,r||(r=!0,V.requestAnimFrame.call(window,(function(){r=!1,i.apply(a,o)})))}));!function(t,e){var n=t[me]||(t[me]={}),i=n.renderProxy=function(t){t.animationName===xe&&e()};V.each(ye,(function(e){Me(t,e,i)})),n.reflow=!!t.offsetParent,t.classList.add(be)}(t,(function(){if(s.resizer){var e=t.parentNode;e&&e!==l.parentNode&&e.insertBefore(l,e.firstChild),l._reset()}}))}function De(t){var e=t[me]||{},n=e.resizer;delete e.resizer,function(t){var e=t[me]||{},n=e.renderProxy;n&&(V.each(ye,(function(e){Se(t,e,n)})),delete e.renderProxy),t.classList.remove(be)}(t),n&&n.parentNode&&n.parentNode.removeChild(n)}var Te={disableCSSInjection:!1,_enabled:\"undefined\"!=typeof window&&\"undefined\"!=typeof document,_ensureLoaded:function(t){if(!this.disableCSSInjection){var e=t.getRootNode?t.getRootNode():document;!function(t,e){var n=t[me]||(t[me]={});if(!n.containsStyles){n.containsStyles=!0,e=\"/* Chart.js */\\n\"+e;var i=document.createElement(\"style\");i.setAttribute(\"type\",\"text/css\"),i.appendChild(document.createTextNode(e)),t.appendChild(i)}}(e.host?e:document.head,pe)}},acquireContext:function(t,e){\"string\"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext(\"2d\");return n&&n.canvas===t?(this._ensureLoaded(t),function(t,e){var n=t.style,i=t.getAttribute(\"height\"),a=t.getAttribute(\"width\");if(t[me]={initial:{height:i,width:a,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||\"block\",null===a||\"\"===a){var r=ke(t,\"width\");void 0!==r&&(t.width=r)}if(null===i||\"\"===i)if(\"\"===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var o=ke(t,\"height\");void 0!==r&&(t.height=o)}}(t,e),n):null},releaseContext:function(t){var e=t.canvas;if(e[me]){var n=e[me].initial;[\"height\",\"width\"].forEach((function(t){var i=n[t];V.isNullOrUndef(i)?e.removeAttribute(t):e.setAttribute(t,i)})),V.each(n.style||{},(function(t,n){e.style[n]=t})),e.width=e.width,delete e[me]}},addEventListener:function(t,e,n){var i=t.canvas;if(\"resize\"!==e){var a=n[me]||(n[me]={});Me(i,e,(a.proxies||(a.proxies={}))[t.id+\"_\"+e]=function(e){n(function(t,e){var n=_e[t.type]||t.type,i=V.getRelativePosition(t,e);return Ce(n,e,i.x,i.y,t)}(e,t))})}else Ae(i,n,t)},removeEventListener:function(t,e,n){var i=t.canvas;if(\"resize\"!==e){var a=((n[me]||{}).proxies||{})[t.id+\"_\"+e];a&&Se(i,e,a)}else De(i)}};V.addEvent=Me,V.removeEvent=Se;var Ie=Te._enabled?Te:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext(\"2d\")||null}},Fe=V.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Ie);z._set(\"global\",{plugins:{}});var Le={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach((function(t){-1===e.indexOf(t)&&e.push(t)})),this._cacheId++},unregister:function(t){var e=this._plugins;[].concat(t).forEach((function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var i,a,r,o,s,l=this.descriptors(t),u=l.length;for(i=0;i<u;++i)if(\"function\"==typeof(s=(r=(a=l[i]).plugin)[e])&&((o=[t].concat(n||[])).push(a.options),!1===s.apply(r,o)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var n=[],i=[],a=t&&t.config||{},r=a.options&&a.options.plugins||{};return this._plugins.concat(a.plugins||[]).forEach((function(t){if(-1===n.indexOf(t)){var e=t.id,a=r[e];!1!==a&&(!0===a&&(a=V.clone(z.global.plugins[e])),n.push(t),i.push({plugin:t,options:a||{}}))}})),e.descriptors=i,e.id=this._cacheId,i},_invalidate:function(t){delete t.$plugins}},Oe={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=V.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?V.merge({},[z.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=V.extend(this.defaults[t],e))},addScalesToLayout:function(t){V.each(t.scales,(function(e){e.fullWidth=e.options.fullWidth,e.position=e.options.position,e.weight=e.options.weight,ge.addBox(t,e)}))}},Re=V.valueOrDefault,ze=V.rtl.getRtlAdapter;z._set(\"global\",{tooltips:{enabled:!0,custom:null,mode:\"nearest\",position:\"average\",intersect:!0,backgroundColor:\"rgba(0,0,0,0.8)\",titleFontStyle:\"bold\",titleSpacing:2,titleMarginBottom:6,titleFontColor:\"#fff\",titleAlign:\"left\",bodySpacing:2,bodyFontColor:\"#fff\",bodyAlign:\"left\",footerFontStyle:\"bold\",footerSpacing:2,footerMarginTop:6,footerFontColor:\"#fff\",footerAlign:\"left\",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:\"#fff\",displayColors:!0,borderColor:\"rgba(0,0,0,0)\",borderWidth:0,callbacks:{beforeTitle:V.noop,title:function(t,e){var n=\"\",i=e.labels,a=i?i.length:0;if(t.length>0){var r=t[0];r.label?n=r.label:r.xLabel?n=r.xLabel:a>0&&r.index<a&&(n=i[r.index])}return n},afterTitle:V.noop,beforeBody:V.noop,beforeLabel:V.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||\"\";return n&&(n+=\": \"),V.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:V.noop,afterBody:V.noop,beforeFooter:V.noop,footer:V.noop,afterFooter:V.noop}}});var Ne={average:function(t){if(!t.length)return!1;var e,n,i=0,a=0,r=0;for(e=0,n=t.length;e<n;++e){var o=t[e];if(o&&o.hasValue()){var s=o.tooltipPosition();i+=s.x,a+=s.y,++r}}return{x:i/r,y:a/r}},nearest:function(t,e){var n,i,a,r=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){var l=t[n];if(l&&l.hasValue()){var u=l.getCenterPoint(),d=V.distanceBetweenPoints(e,u);d<s&&(s=d,a=l)}}if(a){var h=a.tooltipPosition();r=h.x,o=h.y}return{x:r,y:o}}};function Be(t,e){return e&&(V.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ee(t){return(\"string\"==typeof t||t instanceof String)&&t.indexOf(\"\\n\")>-1?t.split(\"\\n\"):t}function We(t){var e=z.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,rtl:t.rtl,textDirection:t.textDirection,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Re(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Re(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Re(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Re(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Re(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Re(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Re(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Re(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Re(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function Ve(t,e){return\"center\"===e?t.x+t.width/2:\"right\"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function He(t){return Be([],Ee(t))}var je=X.extend({initialize:function(){this._model=We(this._options),this._lastActive=[]},getTitle:function(){var t=this,e=t._options,n=e.callbacks,i=n.beforeTitle.apply(t,arguments),a=n.title.apply(t,arguments),r=n.afterTitle.apply(t,arguments),o=[];return o=Be(o,Ee(i)),o=Be(o,Ee(a)),o=Be(o,Ee(r))},getBeforeBody:function(){return He(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,e){var n=this,i=n._options.callbacks,a=[];return V.each(t,(function(t){var r={before:[],lines:[],after:[]};Be(r.before,Ee(i.beforeLabel.call(n,t,e))),Be(r.lines,i.label.call(n,t,e)),Be(r.after,Ee(i.afterLabel.call(n,t,e))),a.push(r)})),a},getAfterBody:function(){return He(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this,e=t._options.callbacks,n=e.beforeFooter.apply(t,arguments),i=e.footer.apply(t,arguments),a=e.afterFooter.apply(t,arguments),r=[];return r=Be(r,Ee(n)),r=Be(r,Ee(i)),r=Be(r,Ee(a))},update:function(t){var e,n,i,a,r,o,s,l,u,d,h=this,c=h._options,f=h._model,g=h._model=We(c),p=h._active,m=h._data,v={xAlign:f.xAlign,yAlign:f.yAlign},b={x:f.x,y:f.y},x={width:f.width,height:f.height},y={x:f.caretX,y:f.caretY};if(p.length){g.opacity=1;var _=[],k=[];y=Ne[c.position].call(h,p,h._eventPosition);var w=[];for(e=0,n=p.length;e<n;++e)w.push((i=p[e],a=void 0,r=void 0,o=void 0,s=void 0,l=void 0,u=void 0,d=void 0,a=i._xScale,r=i._yScale||i._scale,o=i._index,s=i._datasetIndex,l=i._chart.getDatasetMeta(s).controller,u=l._getIndexScale(),d=l._getValueScale(),{xLabel:a?a.getLabelForIndex(o,s):\"\",yLabel:r?r.getLabelForIndex(o,s):\"\",label:u?\"\"+u.getLabelForIndex(o,s):\"\",value:d?\"\"+d.getLabelForIndex(o,s):\"\",index:o,datasetIndex:s,x:i._model.x,y:i._model.y}));c.filter&&(w=w.filter((function(t){return c.filter(t,m)}))),c.itemSort&&(w=w.sort((function(t,e){return c.itemSort(t,e,m)}))),V.each(w,(function(t){_.push(c.callbacks.labelColor.call(h,t,h._chart)),k.push(c.callbacks.labelTextColor.call(h,t,h._chart))})),g.title=h.getTitle(w,m),g.beforeBody=h.getBeforeBody(w,m),g.body=h.getBody(w,m),g.afterBody=h.getAfterBody(w,m),g.footer=h.getFooter(w,m),g.x=y.x,g.y=y.y,g.caretPadding=c.caretPadding,g.labelColors=_,g.labelTextColors=k,g.dataPoints=w,x=function(t,e){var n=t._chart.ctx,i=2*e.yPadding,a=0,r=e.body,o=r.reduce((function(t,e){return t+e.before.length+e.lines.length+e.after.length}),0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,d=e.bodyFontSize,h=e.footerFontSize;i+=s*u,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=o*d,i+=o?(o-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*h,i+=l?(l-1)*e.footerSpacing:0;var c=0,f=function(t){a=Math.max(a,n.measureText(t).width+c)};return n.font=V.fontString(u,e._titleFontStyle,e._titleFontFamily),V.each(e.title,f),n.font=V.fontString(d,e._bodyFontStyle,e._bodyFontFamily),V.each(e.beforeBody.concat(e.afterBody),f),c=e.displayColors?d+2:0,V.each(r,(function(t){V.each(t.before,f),V.each(t.lines,f),V.each(t.after,f)})),c=0,n.font=V.fontString(h,e._footerFontStyle,e._footerFontFamily),V.each(e.footer,f),{width:a+=2*e.xPadding,height:i}}(this,g),b=function(t,e,n,i){var a=t.x,r=t.y,o=t.caretSize,s=t.caretPadding,l=t.cornerRadius,u=n.xAlign,d=n.yAlign,h=o+s,c=l+s;return\"right\"===u?a-=e.width:\"center\"===u&&((a-=e.width/2)+e.width>i.width&&(a=i.width-e.width),a<0&&(a=0)),\"top\"===d?r+=h:r-=\"bottom\"===d?e.height+h:e.height/2,\"center\"===d?\"left\"===u?a+=h:\"right\"===u&&(a-=h):\"left\"===u?a-=c:\"right\"===u&&(a+=c),{x:a,y:r}}(g,x,v=function(t,e){var n,i,a,r,o,s=t._model,l=t._chart,u=t._chart.chartArea,d=\"center\",h=\"center\";s.y<e.height?h=\"top\":s.y>l.height-e.height&&(h=\"bottom\");var c=(u.left+u.right)/2,f=(u.top+u.bottom)/2;\"center\"===h?(n=function(t){return t<=c},i=function(t){return t>c}):(n=function(t){return t<=e.width/2},i=function(t){return t>=l.width-e.width/2}),a=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},r=function(t){return t-e.width-s.caretSize-s.caretPadding<0},o=function(t){return t<=f?\"top\":\"bottom\"},n(s.x)?(d=\"left\",a(s.x)&&(d=\"center\",h=o(s.y))):i(s.x)&&(d=\"right\",r(s.x)&&(d=\"center\",h=o(s.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:d,yAlign:g.yAlign?g.yAlign:h}}(this,x),h._chart)}else g.opacity=0;return g.xAlign=v.xAlign,g.yAlign=v.yAlign,g.x=b.x,g.y=b.y,g.width=x.width,g.height=x.height,g.caretX=y.x,g.caretY=y.y,h._model=g,t&&c.custom&&c.custom.call(h,g),h},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,a=this.getCaretPosition(t,e,i);n.lineTo(a.x1,a.y1),n.lineTo(a.x2,a.y2),n.lineTo(a.x3,a.y3)},getCaretPosition:function(t,e,n){var i,a,r,o,s,l,u=n.caretSize,d=n.cornerRadius,h=n.xAlign,c=n.yAlign,f=t.x,g=t.y,p=e.width,m=e.height;if(\"center\"===c)s=g+m/2,\"left\"===h?(a=(i=f)-u,r=i,o=s+u,l=s-u):(a=(i=f+p)+u,r=i,o=s-u,l=s+u);else if(\"left\"===h?(i=(a=f+d+u)-u,r=a+u):\"right\"===h?(i=(a=f+p-d-u)-u,r=a+u):(i=(a=n.caretX)-u,r=a+u),\"top\"===c)s=(o=g)-u,l=o;else{s=(o=g+m)+u,l=o;var v=r;r=i,i=v}return{x1:i,x2:a,x3:r,y1:o,y2:s,y3:l}},drawTitle:function(t,e,n){var i,a,r,o=e.title,s=o.length;if(s){var l=ze(e.rtl,e.x,e.width);for(t.x=Ve(e,e._titleAlign),n.textAlign=l.textAlign(e._titleAlign),n.textBaseline=\"middle\",i=e.titleFontSize,a=e.titleSpacing,n.fillStyle=e.titleFontColor,n.font=V.fontString(i,e._titleFontStyle,e._titleFontFamily),r=0;r<s;++r)n.fillText(o[r],l.x(t.x),t.y+i/2),t.y+=i+a,r+1===s&&(t.y+=e.titleMarginBottom-a)}},drawBody:function(t,e,n){var i,a,r,o,s,l,u,d,h=e.bodyFontSize,c=e.bodySpacing,f=e._bodyAlign,g=e.body,p=e.displayColors,m=0,v=p?Ve(e,\"left\"):0,b=ze(e.rtl,e.x,e.width),x=function(e){n.fillText(e,b.x(t.x+m),t.y+h/2),t.y+=h+c},y=b.textAlign(f);for(n.textAlign=f,n.textBaseline=\"middle\",n.font=V.fontString(h,e._bodyFontStyle,e._bodyFontFamily),t.x=Ve(e,y),n.fillStyle=e.bodyFontColor,V.each(e.beforeBody,x),m=p&&\"right\"!==y?\"center\"===f?h/2+1:h+2:0,s=0,u=g.length;s<u;++s){for(i=g[s],a=e.labelTextColors[s],r=e.labelColors[s],n.fillStyle=a,V.each(i.before,x),l=0,d=(o=i.lines).length;l<d;++l){if(p){var _=b.x(v);n.fillStyle=e.legendColorBackground,n.fillRect(b.leftForLtr(_,h),t.y,h,h),n.lineWidth=1,n.strokeStyle=r.borderColor,n.strokeRect(b.leftForLtr(_,h),t.y,h,h),n.fillStyle=r.backgroundColor,n.fillRect(b.leftForLtr(b.xPlus(_,1),h-2),t.y+1,h-2,h-2),n.fillStyle=a}x(o[l])}V.each(i.after,x)}m=0,V.each(e.afterBody,x),t.y-=c},drawFooter:function(t,e,n){var i,a,r=e.footer,o=r.length;if(o){var s=ze(e.rtl,e.x,e.width);for(t.x=Ve(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=s.textAlign(e._footerAlign),n.textBaseline=\"middle\",i=e.footerFontSize,n.fillStyle=e.footerFontColor,n.font=V.fontString(i,e._footerFontStyle,e._footerFontFamily),a=0;a<o;++a)n.fillText(r[a],s.x(t.x),t.y+i/2),t.y+=i+e.footerSpacing}},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var a=e.xAlign,r=e.yAlign,o=t.x,s=t.y,l=i.width,u=i.height,d=e.cornerRadius;n.beginPath(),n.moveTo(o+d,s),\"top\"===r&&this.drawCaret(t,i),n.lineTo(o+l-d,s),n.quadraticCurveTo(o+l,s,o+l,s+d),\"center\"===r&&\"right\"===a&&this.drawCaret(t,i),n.lineTo(o+l,s+u-d),n.quadraticCurveTo(o+l,s+u,o+l-d,s+u),\"bottom\"===r&&this.drawCaret(t,i),n.lineTo(o+d,s+u),n.quadraticCurveTo(o,s+u,o,s+u-d),\"center\"===r&&\"left\"===a&&this.drawCaret(t,i),n.lineTo(o,s+d),n.quadraticCurveTo(o,s,o+d,s),n.closePath(),n.fill(),e.borderWidth>0&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},i={x:e.x,y:e.y},a=Math.abs(e.opacity<.001)?0:e.opacity,r=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&r&&(t.save(),t.globalAlpha=a,this.drawBackground(i,e,t,n),i.y+=e.yPadding,V.rtl.overrideTextDirection(t,e.textDirection),this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),V.rtl.restoreTextDirection(t,e.textDirection),t.restore())}},handleEvent:function(t){var e,n=this,i=n._options;return n._lastActive=n._lastActive||[],\"mouseout\"===t.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(t,i.mode,i),i.reverse&&n._active.reverse()),(e=!V.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(i.enabled||i.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}}),qe=Ne,Ue=je;Ue.positioners=qe;var Ye=V.valueOrDefault;function Ge(){return V.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){if(\"xAxes\"===t||\"yAxes\"===t){var a,r,o,s=n[t].length;for(e[t]||(e[t]=[]),a=0;a<s;++a)o=n[t][a],r=Ye(o.type,\"xAxes\"===t?\"category\":\"linear\"),a>=e[t].length&&e[t].push({}),!e[t][a].type||o.type&&o.type!==e[t][a].type?V.merge(e[t][a],[Oe.getScaleDefaults(r),o]):V.merge(e[t][a],o)}else V._merger(t,e,n,i)}})}function Xe(){return V.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){var a=e[t]||{},r=n[t];\"scales\"===t?e[t]=Ge(a,r):\"scale\"===t?e[t]=V.merge(a,[Oe.getScaleDefaults(r.type),r]):V._merger(t,e,n,i)}})}function Ke(t){var e=t.options;V.each(t.scales,(function(e){ge.removeBox(t,e)})),e=Xe(z.global,z[t.config.type],e),t.options=t.config.options=e,t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.tooltip._options=e.tooltips,t.tooltip.initialize()}function Ze(t,e,n){var i,a=function(t){return t.id===i};do{i=e+n++}while(V.findIndex(t,a)>=0);return i}function $e(t){return\"top\"===t||\"bottom\"===t}function Je(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}z._set(\"global\",{elements:{},events:[\"mousemove\",\"mouseout\",\"click\",\"touchstart\",\"touchmove\"],hover:{onHover:null,mode:\"nearest\",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var Qe=function(t,e){return this.construct(t,e),this};V.extend(Qe.prototype,{construct:function(t,e){var n=this;e=function(t){var e=(t=t||{}).data=t.data||{};return e.datasets=e.datasets||[],e.labels=e.labels||[],t.options=Xe(z.global,z[t.type],t.options||{}),t}(e);var i=Fe.acquireContext(t,e),a=i&&i.canvas,r=a&&a.height,o=a&&a.width;n.id=V.uid(),n.ctx=i,n.canvas=a,n.config=e,n.width=o,n.height=r,n.aspectRatio=r?o/r:null,n.options=e.options,n._bufferedRender=!1,n._layers=[],n.chart=n,n.controller=n,Qe.instances[n.id]=n,Object.defineProperty(n,\"data\",{get:function(){return n.config.data},set:function(t){n.config.data=t}}),i&&a?(n.initialize(),n.update()):console.error(\"Failed to create chart: can't acquire context from the given item\")},initialize:function(){var t=this;return Le.notify(t,\"beforeInit\"),V.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.initToolTip(),Le.notify(t,\"afterInit\"),t},clear:function(){return V.canvas.clear(this),this},stop:function(){return $.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,i=e.canvas,a=n.maintainAspectRatio&&e.aspectRatio||null,r=Math.max(0,Math.floor(V.getMaximumWidth(i))),o=Math.max(0,Math.floor(a?r/a:V.getMaximumHeight(i)));if((e.width!==r||e.height!==o)&&(i.width=e.width=r,i.height=e.height=o,i.style.width=r+\"px\",i.style.height=o+\"px\",V.retinaScale(e,n.devicePixelRatio),!t)){var s={width:r,height:o};Le.notify(e,\"resize\",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,e=t.scales||{},n=t.scale;V.each(e.xAxes,(function(t,n){t.id||(t.id=Ze(e.xAxes,\"x-axis-\",n))})),V.each(e.yAxes,(function(t,n){t.id||(t.id=Ze(e.yAxes,\"y-axis-\",n))})),n&&(n.id=n.id||\"scale\")},buildOrUpdateScales:function(){var t=this,e=t.options,n=t.scales||{},i=[],a=Object.keys(n).reduce((function(t,e){return t[e]=!1,t}),{});e.scales&&(i=i.concat((e.scales.xAxes||[]).map((function(t){return{options:t,dtype:\"category\",dposition:\"bottom\"}})),(e.scales.yAxes||[]).map((function(t){return{options:t,dtype:\"linear\",dposition:\"left\"}})))),e.scale&&i.push({options:e.scale,dtype:\"radialLinear\",isDefault:!0,dposition:\"chartArea\"}),V.each(i,(function(e){var i=e.options,r=i.id,o=Ye(i.type,e.dtype);$e(i.position)!==$e(e.dposition)&&(i.position=e.dposition),a[r]=!0;var s=null;if(r in n&&n[r].type===o)(s=n[r]).options=i,s.ctx=t.ctx,s.chart=t;else{var l=Oe.getScaleConstructor(o);if(!l)return;s=new l({id:r,type:o,options:i,ctx:t.ctx,chart:t}),n[s.id]=s}s.mergeTicksOptions(),e.isDefault&&(t.scale=s)})),V.each(a,(function(t,e){t||delete n[e]})),t.scales=n,Oe.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t,e,n=this,i=[],a=n.data.datasets;for(t=0,e=a.length;t<e;t++){var r=a[t],o=n.getDatasetMeta(t),s=r.type||n.config.type;if(o.type&&o.type!==s&&(n.destroyDatasetMeta(t),o=n.getDatasetMeta(t)),o.type=s,o.order=r.order||0,o.index=t,o.controller)o.controller.updateIndex(t),o.controller.linkScales();else{var l=$t[o.type];if(void 0===l)throw new Error('\"'+o.type+'\" is not a chart type.');o.controller=new l(n,t),i.push(o.controller)}}return i},resetElements:function(){var t=this;V.each(t.data.datasets,(function(e,n){t.getDatasetMeta(n).controller.reset()}),t)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,i=this;if(t&&\"object\"==typeof t||(t={duration:t,lazy:arguments[1]}),Ke(i),Le._invalidate(i),!1!==Le.notify(i,\"beforeUpdate\")){i.tooltip._data=i.data;var a=i.buildOrUpdateControllers();for(e=0,n=i.data.datasets.length;e<n;e++)i.getDatasetMeta(e).controller.buildOrUpdateElements();i.updateLayout(),i.options.animation&&i.options.animation.duration&&V.each(a,(function(t){t.reset()})),i.updateDatasets(),i.tooltip.initialize(),i.lastActive=[],Le.notify(i,\"afterUpdate\"),i._layers.sort(Je(\"z\",\"_idx\")),i._bufferedRender?i._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:i.render(t)}},updateLayout:function(){var t=this;!1!==Le.notify(t,\"beforeLayout\")&&(ge.update(this,this.width,this.height),t._layers=[],V.each(t.boxes,(function(e){e._configure&&e._configure(),t._layers.push.apply(t._layers,e._layers())}),t),t._layers.forEach((function(t,e){t._idx=e})),Le.notify(t,\"afterScaleUpdate\"),Le.notify(t,\"afterLayout\"))},updateDatasets:function(){if(!1!==Le.notify(this,\"beforeDatasetsUpdate\")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);Le.notify(this,\"afterDatasetsUpdate\")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==Le.notify(this,\"beforeDatasetUpdate\",[n])&&(e.controller._update(),Le.notify(this,\"afterDatasetUpdate\",[n]))},render:function(t){var e=this;t&&\"object\"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=Ye(t.duration,n&&n.duration),a=t.lazy;if(!1!==Le.notify(e,\"beforeRender\")){var r=function(t){Le.notify(e,\"afterRender\"),V.callback(n&&n.onComplete,[t],e)};if(n&&i){var o=new Z({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=V.easing.effects[e.easing],i=e.currentStep,a=i/e.numSteps;t.draw(n(a),a,i)},onAnimationProgress:n.onProgress,onAnimationComplete:r});$.addAnimation(e,o,i,a)}else e.draw(),r(new Z({numSteps:0,chart:e}));return e}},draw:function(t){var e,n,i=this;if(i.clear(),V.isNullOrUndef(t)&&(t=1),i.transition(t),!(i.width<=0||i.height<=0)&&!1!==Le.notify(i,\"beforeDraw\",[t])){for(n=i._layers,e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(i.chartArea);for(i.drawDatasets(t);e<n.length;++e)n[e].draw(i.chartArea);i._drawTooltip(t),Le.notify(i,\"afterDraw\",[t])}},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},_getSortedDatasetMetas:function(t){var e,n,i=[];for(e=0,n=(this.data.datasets||[]).length;e<n;++e)t&&!this.isDatasetVisible(e)||i.push(this.getDatasetMeta(e));return i.sort(Je(\"order\",\"index\")),i},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(t){var e,n;if(!1!==Le.notify(this,\"beforeDatasetsDraw\",[t])){for(n=(e=this._getSortedVisibleDatasetMetas()).length-1;n>=0;--n)this.drawDataset(e[n],t);Le.notify(this,\"afterDatasetsDraw\",[t])}},drawDataset:function(t,e){var n={meta:t,index:t.index,easingValue:e};!1!==Le.notify(this,\"beforeDatasetDraw\",[n])&&(t.controller.draw(e),Le.notify(this,\"afterDatasetDraw\",[n]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==Le.notify(this,\"beforeTooltipDraw\",[n])&&(e.draw(),Le.notify(this,\"afterTooltipDraw\",[n]))},getElementAtEvent:function(t){return ae.modes.single(this,t)},getElementsAtEvent:function(t){return ae.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ae.modes[\"x-axis\"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=ae.modes[e];return\"function\"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return ae.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n||(n=e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e.order||0,index:t}),n},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return\"boolean\"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),V.canvas.clear(n),Fe.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Le.notify(n,\"destroy\"),delete Qe.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Ue({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var t=this,e=t._listeners={},n=function(){t.eventHandler.apply(t,arguments)};V.each(t.options.events,(function(i){Fe.addEventListener(t,i,n),e[i]=n})),t.options.responsive&&(n=function(){t.resize()},Fe.addEventListener(t,\"resize\",n),e.resize=n)},unbindEvents:function(){var t=this,e=t._listeners;e&&(delete t._listeners,V.each(e,(function(e,n){Fe.removeEventListener(t,n,e)})))},updateHoverStyle:function(t,e,n){var i,a,r,o=n?\"set\":\"remove\";for(a=0,r=t.length;a<r;++a)(i=t[a])&&this.getDatasetMeta(i._datasetIndex).controller[o+\"HoverStyle\"](i);\"dataset\"===e&&this.getDatasetMeta(t[0]._datasetIndex).controller[\"_\"+o+\"DatasetHoverStyle\"]()},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==Le.notify(e,\"beforeEvent\",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),Le.notify(e,\"afterEvent\",[t]);var a=e._bufferedRequest;return a?e.render(a):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,i=n.options||{},a=i.hover;return n.lastActive=n.lastActive||[],\"mouseout\"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,a.mode,a),V.callback(i.onHover||i.hover.onHover,[t.native,n.active],n),\"mouseup\"!==t.type&&\"click\"!==t.type||i.onClick&&i.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,a.mode,!1),n.active.length&&a.mode&&n.updateHoverStyle(n.active,a.mode,!0),e=!V.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),Qe.instances={};var tn=Qe;Qe.Controller=Qe,Qe.types={},V.configMerge=Xe,V.scaleMerge=Ge;function en(){throw new Error(\"This method is not implemented: either no adapter can be found or an incomplete integration was provided.\")}function nn(t){this.options=t||{}}V.extend(nn.prototype,{formats:en,parse:en,format:en,add:en,diff:en,startOf:en,endOf:en,_create:function(t){return t}}),nn.override=function(t){V.extend(nn.prototype,t)};var an={_date:nn},rn={formatters:{values:function(t){return V.isArray(t)?t:\"\"+t},linear:function(t,e,n){var i=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(i)>1&&t!==Math.floor(t)&&(i=t-Math.floor(t));var a=V.log10(Math.abs(i)),r=\"\";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=V.log10(Math.abs(t)),s=Math.floor(o)-Math.floor(a);s=Math.max(Math.min(s,20),0),r=t.toExponential(s)}else{var l=-1*Math.floor(a);l=Math.max(Math.min(l,20),0),r=t.toFixed(l)}else r=\"0\";return r},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(V.log10(t)));return 0===t?\"0\":1===i||2===i||5===i||0===e||e===n.length-1?t.toExponential():\"\"}}},on=V.isArray,sn=V.isNullOrUndef,ln=V.valueOrDefault,un=V.valueAtIndexOrDefault;function dn(t,e,n){var i,a=t.getTicks().length,r=Math.min(e,a-1),o=t.getPixelForTick(r),s=t._startPixel,l=t._endPixel;if(!(n&&(i=1===a?Math.max(o-s,l-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(r-1))/2,(o+=r<e?i:-i)<s-1e-6||o>l+1e-6)))return o}function hn(t,e,n,i){var a,r,o,s,l,u,d,h,c,f,g,p,m,v=n.length,b=[],x=[],y=[];for(a=0;a<v;++a){if(s=n[a].label,l=n[a].major?e.major:e.minor,t.font=u=l.string,d=i[u]=i[u]||{data:{},gc:[]},h=l.lineHeight,c=f=0,sn(s)||on(s)){if(on(s))for(r=0,o=s.length;r<o;++r)g=s[r],sn(g)||on(g)||(c=V.measureText(t,d.data,d.gc,c,g),f+=h)}else c=V.measureText(t,d.data,d.gc,c,s),f=h;b.push(c),x.push(f),y.push(h/2)}function _(t){return{width:b[t]||0,height:x[t]||0,offset:y[t]||0}}return function(t,e){V.each(t,(function(t){var n,i=t.gc,a=i.length/2;if(a>e){for(n=0;n<a;++n)delete t.data[i[n]];i.splice(0,a)}}))}(i,v),p=b.indexOf(Math.max.apply(null,b)),m=x.indexOf(Math.max.apply(null,x)),{first:_(0),last:_(v-1),widest:_(p),highest:_(m)}}function cn(t){return t.drawTicks?t.tickMarkLength:0}function fn(t){var e,n;return t.display?(e=V.options._parseFont(t),n=V.options.toPadding(t.padding),e.lineHeight+n.height):0}function gn(t,e){return V.extend(V.options._parseFont({fontFamily:ln(e.fontFamily,t.fontFamily),fontSize:ln(e.fontSize,t.fontSize),fontStyle:ln(e.fontStyle,t.fontStyle),lineHeight:ln(e.lineHeight,t.lineHeight)}),{color:V.options.resolve([e.fontColor,t.fontColor,z.global.defaultFontColor])})}function pn(t){var e=gn(t,t.minor);return{minor:e,major:t.major.enabled?gn(t,t.major):e}}function mn(t){var e,n,i,a=[];for(n=0,i=t.length;n<i;++n)void 0!==(e=t[n])._index&&a.push(e);return a}function vn(t,e,n,i){var a,r,o,s,l=ln(n,0),u=Math.min(ln(i,t.length),t.length),d=0;for(e=Math.ceil(e),i&&(e=(a=i-n)/Math.floor(a/e)),s=l;s<0;)d++,s=Math.round(l+d*e);for(r=Math.max(l,0);r<u;r++)o=t[r],r===s?(o._index=r,d++,s=Math.round(l+d*e)):delete o.label}z._set(\"scale\",{display:!0,position:\"left\",offset:!1,gridLines:{display:!0,color:\"rgba(0,0,0,0.1)\",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:\"rgba(0,0,0,0.25)\",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:\"\",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:rn.formatters.values,minor:{},major:{}}});var bn=X.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){V.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,a,r,o,s,l=this,u=l.options.ticks,d=u.sampleSize;if(l.beforeUpdate(),l.maxWidth=t,l.maxHeight=e,l.margins=V.extend({left:0,right:0,top:0,bottom:0},n),l._ticks=null,l.ticks=null,l._labelSizes=null,l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l._gridLineItems=null,l._labelItems=null,l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],(!(o=l.afterBuildTicks(o)||o)||!o.length)&&l.ticks)for(o=[],i=0,a=l.ticks.length;i<a;++i)o.push({value:l.ticks[i],major:!1});return l._ticks=o,s=d<o.length,r=l._convertTicksToLabels(s?function(t,e){for(var n=[],i=t.length/e,a=0,r=t.length;a<r;a+=i)n.push(t[Math.floor(a)]);return n}(o,d):o),l._configure(),l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l._ticksToDraw=u.display&&(u.autoSkip||\"auto\"===u.source)?l._autoSkip(o):o,s&&(r=l._convertTicksToLabels(l._ticksToDraw)),l.ticks=r,l.afterUpdate(),l.minSize},_configure:function(){var t,e,n=this,i=n.options.ticks.reverse;n.isHorizontal()?(t=n.left,e=n.right):(t=n.top,e=n.bottom,i=!i),n._startPixel=t,n._endPixel=e,n._reversePixels=i,n._length=e-t},afterUpdate:function(){V.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){V.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){V.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){V.callback(this.options.beforeDataLimits,[this])},determineDataLimits:V.noop,afterDataLimits:function(){V.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){V.callback(this.options.beforeBuildTicks,[this])},buildTicks:V.noop,afterBuildTicks:function(t){var e=this;return on(t)&&t.length?V.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=V.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){V.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){V.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){V.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t,e,n,i,a,r,o,s=this,l=s.options,u=l.ticks,d=s.getTicks().length,h=u.minRotation||0,c=u.maxRotation,f=h;!s._isVisible()||!u.display||h>=c||d<=1||!s.isHorizontal()?s.labelRotation=h:(e=(t=s._getLabelSizes()).widest.width,n=t.highest.height-t.highest.offset,i=Math.min(s.maxWidth,s.chart.width-e),e+6>(a=l.offset?s.maxWidth/d:i/(d-1))&&(a=i/(d-(l.offset?.5:1)),r=s.maxHeight-cn(l.gridLines)-u.padding-fn(l.scaleLabel),o=Math.sqrt(e*e+n*n),f=V.toDegrees(Math.min(Math.asin(Math.min((t.highest.height+6)/a,1)),Math.asin(Math.min(r/o,1))-Math.asin(n/o))),f=Math.max(h,Math.min(c,f))),s.labelRotation=f)},afterCalculateTickRotation:function(){V.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){V.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=t.chart,i=t.options,a=i.ticks,r=i.scaleLabel,o=i.gridLines,s=t._isVisible(),l=\"bottom\"===i.position,u=t.isHorizontal();if(u?e.width=t.maxWidth:s&&(e.width=cn(o)+fn(r)),u?s&&(e.height=cn(o)+fn(r)):e.height=t.maxHeight,a.display&&s){var d=pn(a),h=t._getLabelSizes(),c=h.first,f=h.last,g=h.widest,p=h.highest,m=.4*d.minor.lineHeight,v=a.padding;if(u){var b=0!==t.labelRotation,x=V.toRadians(t.labelRotation),y=Math.cos(x),_=Math.sin(x),k=_*g.width+y*(p.height-(b?p.offset:0))+(b?0:m);e.height=Math.min(t.maxHeight,e.height+k+v);var w,M,S=t.getPixelForTick(0)-t.left,C=t.right-t.getPixelForTick(t.getTicks().length-1);b?(w=l?y*c.width+_*c.offset:_*(c.height-c.offset),M=l?_*(f.height-f.offset):y*f.width+_*f.offset):(w=c.width/2,M=f.width/2),t.paddingLeft=Math.max((w-S)*t.width/(t.width-S),0)+3,t.paddingRight=Math.max((M-C)*t.width/(t.width-C),0)+3}else{var P=a.mirror?0:g.width+v+m;e.width=Math.min(t.maxWidth,e.width+P),t.paddingTop=c.height/2,t.paddingBottom=f.height/2}}t.handleMargins(),u?(t.width=t._length=n.width-t.margins.left-t.margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t.margins.top-t.margins.bottom)},handleMargins:function(){var t=this;t.margins&&(t.margins.left=Math.max(t.paddingLeft,t.margins.left),t.margins.top=Math.max(t.paddingTop,t.margins.top),t.margins.right=Math.max(t.paddingRight,t.margins.right),t.margins.bottom=Math.max(t.paddingBottom,t.margins.bottom))},afterFit:function(){V.callback(this.options.afterFit,[this])},isHorizontal:function(){var t=this.options.position;return\"top\"===t||\"bottom\"===t},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(sn(t))return NaN;if((\"number\"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},_convertTicksToLabels:function(t){var e,n,i,a=this;for(a.ticks=t.map((function(t){return t.value})),a.beforeTickToLabelConversion(),e=a.convertTicksToLabels(t)||a.ticks,a.afterTickToLabelConversion(),n=0,i=t.length;n<i;++n)t[n].label=e[n];return e},_getLabelSizes:function(){var t=this,e=t._labelSizes;return e||(t._labelSizes=e=hn(t.ctx,pn(t.options.ticks),t.getTicks(),t.longestTextCache),t.longestLabelWidth=e.widest.width),e},_parseValue:function(t){var e,n,i,a;return on(t)?(e=+this.getRightValue(t[0]),n=+this.getRightValue(t[1]),i=Math.min(e,n),a=Math.max(e,n)):(e=void 0,n=t=+this.getRightValue(t),i=t,a=t),{min:i,max:a,start:e,end:n}},_getScaleLabel:function(t){var e=this._parseValue(t);return void 0!==e.start?\"[\"+e.start+\", \"+e.end+\"]\":+this.getRightValue(t)},getLabelForIndex:V.noop,getPixelForValue:V.noop,getValueForPixel:V.noop,getPixelForTick:function(t){var e=this.options.offset,n=this._ticks.length,i=1/Math.max(n-(e?0:1),1);return t<0||t>n-1?null:this.getPixelForDecimal(t*i+(e?i/2:0))},getPixelForDecimal:function(t){return this._reversePixels&&(t=1-t),this._startPixel+t*this._length},getDecimalForPixel:function(t){var e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0},_autoSkip:function(t){var e,n,i,a,r=this.options.ticks,o=this._length,s=r.maxTicksLimit||o/this._tickSize()+1,l=r.major.enabled?function(t){var e,n,i=[];for(e=0,n=t.length;e<n;e++)t[e].major&&i.push(e);return i}(t):[],u=l.length,d=l[0],h=l[u-1];if(u>s)return function(t,e,n){var i,a,r=0,o=e[0];for(n=Math.ceil(n),i=0;i<t.length;i++)a=t[i],i===o?(a._index=i,o=e[++r*n]):delete a.label}(t,l,u/s),mn(t);if(i=function(t,e,n,i){var a,r,o,s,l=function(t){var e,n,i=t.length;if(i<2)return!1;for(n=t[0],e=1;e<i;++e)if(t[e]-t[e-1]!==n)return!1;return n}(t),u=(e.length-1)/i;if(!l)return Math.max(u,1);for(o=0,s=(a=V.math._factorize(l)).length-1;o<s;o++)if((r=a[o])>u)return r;return Math.max(u,1)}(l,t,0,s),u>0){for(e=0,n=u-1;e<n;e++)vn(t,i,l[e],l[e+1]);return a=u>1?(h-d)/(u-1):null,vn(t,i,V.isNullOrUndef(a)?0:d-a,d),vn(t,i,h,V.isNullOrUndef(a)?t.length:h+a),mn(t)}return vn(t,i),mn(t)},_tickSize:function(){var t=this.options.ticks,e=V.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),a=this._getLabelSizes(),r=t.autoSkipPadding||0,o=a?a.widest.width+r:0,s=a?a.highest.height+r:0;return this.isHorizontal()?s*n>o*i?o/n:s/i:s*i<o*n?s/n:o/i},_isVisible:function(){var t,e,n,i=this.chart,a=this.options.display;if(\"auto\"!==a)return!!a;for(t=0,e=i.data.datasets.length;t<e;++t)if(i.isDatasetVisible(t)&&((n=i.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(t){var e,n,i,a,r,o,s,l,u,d,h,c,f,g,p,m,v,b=this,x=b.chart,y=b.options,_=y.gridLines,k=y.position,w=_.offsetGridLines,M=b.isHorizontal(),S=b._ticksToDraw,C=S.length+(w?1:0),P=cn(_),A=[],D=_.drawBorder?un(_.lineWidth,0,0):0,T=D/2,I=V._alignPixel,F=function(t){return I(x,t,D)};for(\"top\"===k?(e=F(b.bottom),s=b.bottom-P,u=e-T,h=F(t.top)+T,f=t.bottom):\"bottom\"===k?(e=F(b.top),h=t.top,f=F(t.bottom)-T,s=e+T,u=b.top+P):\"left\"===k?(e=F(b.right),o=b.right-P,l=e-T,d=F(t.left)+T,c=t.right):(e=F(b.left),d=t.left,c=F(t.right)-T,o=e+T,l=b.left+P),n=0;n<C;++n)i=S[n]||{},sn(i.label)&&n<S.length||(n===b.zeroLineIndex&&y.offset===w?(g=_.zeroLineWidth,p=_.zeroLineColor,m=_.zeroLineBorderDash||[],v=_.zeroLineBorderDashOffset||0):(g=un(_.lineWidth,n,1),p=un(_.color,n,\"rgba(0,0,0,0.1)\"),m=_.borderDash||[],v=_.borderDashOffset||0),void 0!==(a=dn(b,i._index||n,w))&&(r=I(x,a,g),M?o=l=d=c=r:s=u=h=f=r,A.push({tx1:o,ty1:s,tx2:l,ty2:u,x1:d,y1:h,x2:c,y2:f,width:g,color:p,borderDash:m,borderDashOffset:v})));return A.ticksLength=C,A.borderValue=e,A},_computeLabelItems:function(){var t,e,n,i,a,r,o,s,l,u,d,h,c=this,f=c.options,g=f.ticks,p=f.position,m=g.mirror,v=c.isHorizontal(),b=c._ticksToDraw,x=pn(g),y=g.padding,_=cn(f.gridLines),k=-V.toRadians(c.labelRotation),w=[];for(\"top\"===p?(r=c.bottom-_-y,o=k?\"left\":\"center\"):\"bottom\"===p?(r=c.top+_+y,o=k?\"right\":\"center\"):\"left\"===p?(a=c.right-(m?0:_)-y,o=m?\"left\":\"right\"):(a=c.left+(m?0:_)+y,o=m?\"right\":\"left\"),t=0,e=b.length;t<e;++t)i=(n=b[t]).label,sn(i)||(s=c.getPixelForTick(n._index||t)+g.labelOffset,u=(l=n.major?x.major:x.minor).lineHeight,d=on(i)?i.length:1,v?(a=s,h=\"top\"===p?((k?1:.5)-d)*u:(k?0:.5)*u):(r=s,h=(1-d)*u/2),w.push({x:a,y:r,rotation:k,label:i,font:l,textOffset:h,textAlign:o}));return w},_drawGrid:function(t){var e=this,n=e.options.gridLines;if(n.display){var i,a,r,o,s,l=e.ctx,u=e.chart,d=V._alignPixel,h=n.drawBorder?un(n.lineWidth,0,0):0,c=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));for(r=0,o=c.length;r<o;++r)i=(s=c[r]).width,a=s.color,i&&a&&(l.save(),l.lineWidth=i,l.strokeStyle=a,l.setLineDash&&(l.setLineDash(s.borderDash),l.lineDashOffset=s.borderDashOffset),l.beginPath(),n.drawTicks&&(l.moveTo(s.tx1,s.ty1),l.lineTo(s.tx2,s.ty2)),n.drawOnChartArea&&(l.moveTo(s.x1,s.y1),l.lineTo(s.x2,s.y2)),l.stroke(),l.restore());if(h){var f,g,p,m,v=h,b=un(n.lineWidth,c.ticksLength-1,1),x=c.borderValue;e.isHorizontal()?(f=d(u,e.left,v)-v/2,g=d(u,e.right,b)+b/2,p=m=x):(p=d(u,e.top,v)-v/2,m=d(u,e.bottom,b)+b/2,f=g=x),l.lineWidth=h,l.strokeStyle=un(n.color,0),l.beginPath(),l.moveTo(f,p),l.lineTo(g,m),l.stroke()}}},_drawLabels:function(){var t=this;if(t.options.ticks.display){var e,n,i,a,r,o,s,l,u=t.ctx,d=t._labelItems||(t._labelItems=t._computeLabelItems());for(e=0,i=d.length;e<i;++e){if(o=(r=d[e]).font,u.save(),u.translate(r.x,r.y),u.rotate(r.rotation),u.font=o.string,u.fillStyle=o.color,u.textBaseline=\"middle\",u.textAlign=r.textAlign,s=r.label,l=r.textOffset,on(s))for(n=0,a=s.length;n<a;++n)u.fillText(\"\"+s[n],0,l),l+=o.lineHeight;else u.fillText(s,0,l);u.restore()}}},_drawTitle:function(){var t=this,e=t.ctx,n=t.options,i=n.scaleLabel;if(i.display){var a,r,o=ln(i.fontColor,z.global.defaultFontColor),s=V.options._parseFont(i),l=V.options.toPadding(i.padding),u=s.lineHeight/2,d=n.position,h=0;if(t.isHorizontal())a=t.left+t.width/2,r=\"bottom\"===d?t.bottom-u-l.bottom:t.top+u+l.top;else{var c=\"left\"===d;a=c?t.left+u+l.top:t.right-u-l.top,r=t.top+t.height/2,h=c?-.5*Math.PI:.5*Math.PI}e.save(),e.translate(a,r),e.rotate(h),e.textAlign=\"center\",e.textBaseline=\"middle\",e.fillStyle=o,e.font=s.string,e.fillText(i.labelString,0,0),e.restore()}},draw:function(t){this._isVisible()&&(this._drawGrid(t),this._drawTitle(),this._drawLabels())},_layers:function(){var t=this,e=t.options,n=e.ticks&&e.ticks.z||0,i=e.gridLines&&e.gridLines.z||0;return t._isVisible()&&n!==i&&t.draw===t._draw?[{z:i,draw:function(){t._drawGrid.apply(t,arguments),t._drawTitle.apply(t,arguments)}},{z:n,draw:function(){t._drawLabels.apply(t,arguments)}}]:[{z:n,draw:function(){t.draw.apply(t,arguments)}}]},_getMatchingVisibleMetas:function(t){var e=this,n=e.isHorizontal();return e.chart._getSortedVisibleDatasetMetas().filter((function(i){return(!t||i.type===t)&&(n?i.xAxisID===e.id:i.yAxisID===e.id)}))}});bn.prototype._draw=bn.prototype.draw;var xn=bn,yn=V.isNullOrUndef,_n=xn.extend({determineDataLimits:function(){var t,e=this,n=e._getLabels(),i=e.options.ticks,a=i.min,r=i.max,o=0,s=n.length-1;void 0!==a&&(t=n.indexOf(a))>=0&&(o=t),void 0!==r&&(t=n.indexOf(r))>=0&&(s=t),e.minIndex=o,e.maxIndex=s,e.min=n[o],e.max=n[s]},buildTicks:function(){var t=this._getLabels(),e=this.minIndex,n=this.maxIndex;this.ticks=0===e&&n===t.length-1?t:t.slice(e,n+1)},getLabelForIndex:function(t,e){var n=this.chart;return n.getDatasetMeta(e).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[e].data[t]):this._getLabels()[t]},_configure:function(){var t=this,e=t.options.offset,n=t.ticks;xn.prototype._configure.call(t),t.isHorizontal()||(t._reversePixels=!t._reversePixels),n&&(t._startValue=t.minIndex-(e?.5:0),t._valueRange=Math.max(n.length-(e?0:1),1))},getPixelForValue:function(t,e,n){var i,a,r,o=this;return yn(e)||yn(n)||(t=o.chart.data.datasets[n].data[e]),yn(t)||(i=o.isHorizontal()?t.x:t.y),(void 0!==i||void 0!==t&&isNaN(e))&&(a=o._getLabels(),t=V.valueOrDefault(i,t),e=-1!==(r=a.indexOf(t))?r:e,isNaN(e)&&(e=t)),o.getPixelForDecimal((e-o._startValue)/o._valueRange)},getPixelForTick:function(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t],t+this.minIndex)},getValueForPixel:function(t){var e=Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange);return Math.min(Math.max(e,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),kn={position:\"bottom\"};_n._defaults=kn;var wn=V.noop,Mn=V.isNullOrUndef;var Sn=xn.extend({getRightValue:function(t){return\"string\"==typeof t?+t:xn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=V.sign(t.min),i=V.sign(t.max);n<0&&i<0?t.max=0:n>0&&i>0&&(t.min=0)}var a=void 0!==e.min||void 0!==e.suggestedMin,r=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),a!==r&&t.min>=t.max&&(a?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,i=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),i=i||11),i&&(t=Math.min(i,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:wn,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),i={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:V.valueOrDefault(e.fixedStepSize,e.stepSize)},a=t.ticks=function(t,e){var n,i,a,r,o=[],s=t.stepSize,l=s||1,u=t.maxTicks-1,d=t.min,h=t.max,c=t.precision,f=e.min,g=e.max,p=V.niceNum((g-f)/u/l)*l;if(p<1e-14&&Mn(d)&&Mn(h))return[f,g];(r=Math.ceil(g/p)-Math.floor(f/p))>u&&(p=V.niceNum(r*p/u/l)*l),s||Mn(c)?n=Math.pow(10,V._decimalPlaces(p)):(n=Math.pow(10,c),p=Math.ceil(p*n)/n),i=Math.floor(f/p)*p,a=Math.ceil(g/p)*p,s&&(!Mn(d)&&V.almostWhole(d/p,p/1e3)&&(i=d),!Mn(h)&&V.almostWhole(h/p,p/1e3)&&(a=h)),r=(a-i)/p,r=V.almostEquals(r,Math.round(r),p/1e3)?Math.round(r):Math.ceil(r),i=Math.round(i*n)/n,a=Math.round(a*n)/n,o.push(Mn(d)?i:d);for(var m=1;m<r;++m)o.push(Math.round((i+m*p)*n)/n);return o.push(Mn(h)?a:h),o}(i,t);t.handleDirectionalChanges(),t.max=V.max(a),t.min=V.min(a),e.reverse?(a.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),xn.prototype.convertTicksToLabels.call(t)},_configure:function(){var t,e=this,n=e.getTicks(),i=e.min,a=e.max;xn.prototype._configure.call(e),e.options.offset&&n.length&&(i-=t=(a-i)/Math.max(n.length-1,1)/2,a+=t),e._startValue=i,e._endValue=a,e._valueRange=a-i}}),Cn={position:\"left\",ticks:{callback:rn.formatters.linear}};function Pn(t,e,n,i){var a,r,o=t.options,s=function(t,e,n){var i=[n.type,void 0===e&&void 0===n.stack?n.index:\"\",n.stack].join(\".\");return void 0===t[i]&&(t[i]={pos:[],neg:[]}),t[i]}(e,o.stacked,n),l=s.pos,u=s.neg,d=i.length;for(a=0;a<d;++a)r=t._parseValue(i[a]),isNaN(r.min)||isNaN(r.max)||n.data[a].hidden||(l[a]=l[a]||0,u[a]=u[a]||0,o.relativePoints?l[a]=100:r.min<0||r.max<0?u[a]+=r.min:l[a]+=r.max)}function An(t,e,n){var i,a,r=n.length;for(i=0;i<r;++i)a=t._parseValue(n[i]),isNaN(a.min)||isNaN(a.max)||e.data[i].hidden||(t.min=Math.min(t.min,a.min),t.max=Math.max(t.max,a.max))}var Dn=Sn.extend({determineDataLimits:function(){var t,e,n,i,a=this,r=a.options,o=a.chart.data.datasets,s=a._getMatchingVisibleMetas(),l=r.stacked,u={},d=s.length;if(a.min=Number.POSITIVE_INFINITY,a.max=Number.NEGATIVE_INFINITY,void 0===l)for(t=0;!l&&t<d;++t)l=void 0!==(e=s[t]).stack;for(t=0;t<d;++t)n=o[(e=s[t]).index].data,l?Pn(a,u,e,n):An(a,e,n);V.each(u,(function(t){i=t.pos.concat(t.neg),a.min=Math.min(a.min,V.min(i)),a.max=Math.max(a.max,V.max(i))})),a.min=V.isFinite(a.min)&&!isNaN(a.min)?a.min:0,a.max=V.isFinite(a.max)&&!isNaN(a.max)?a.max:1,a.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=V.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){return this.getPixelForDecimal((+this.getRightValue(t)-this._startValue)/this._valueRange)},getValueForPixel:function(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange},getPixelForTick:function(t){var e=this.ticksAsNumbers;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])}}),Tn=Cn;Dn._defaults=Tn;var In=V.valueOrDefault,Fn=V.math.log10;var Ln={position:\"left\",ticks:{callback:rn.formatters.logarithmic}};function On(t,e){return V.isFinite(t)&&t>=0?t:e}var Rn=xn.extend({determineDataLimits:function(){var t,e,n,i,a,r,o=this,s=o.options,l=o.chart,u=l.data.datasets,d=o.isHorizontal();function h(t){return d?t.xAxisID===o.id:t.yAxisID===o.id}o.min=Number.POSITIVE_INFINITY,o.max=Number.NEGATIVE_INFINITY,o.minNotZero=Number.POSITIVE_INFINITY;var c=s.stacked;if(void 0===c)for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&h(e)&&void 0!==e.stack){c=!0;break}if(s.stacked||c){var f={};for(t=0;t<u.length;t++){var g=[(e=l.getDatasetMeta(t)).type,void 0===s.stacked&&void 0===e.stack?t:\"\",e.stack].join(\".\");if(l.isDatasetVisible(t)&&h(e))for(void 0===f[g]&&(f[g]=[]),a=0,r=(i=u[t].data).length;a<r;a++){var p=f[g];n=o._parseValue(i[a]),isNaN(n.min)||isNaN(n.max)||e.data[a].hidden||n.min<0||n.max<0||(p[a]=p[a]||0,p[a]+=n.max)}}V.each(f,(function(t){if(t.length>0){var e=V.min(t),n=V.max(t);o.min=Math.min(o.min,e),o.max=Math.max(o.max,n)}}))}else for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&h(e))for(a=0,r=(i=u[t].data).length;a<r;a++)n=o._parseValue(i[a]),isNaN(n.min)||isNaN(n.max)||e.data[a].hidden||n.min<0||n.max<0||(o.min=Math.min(n.min,o.min),o.max=Math.max(n.max,o.max),0!==n.min&&(o.minNotZero=Math.min(n.min,o.minNotZero)));o.min=V.isFinite(o.min)?o.min:null,o.max=V.isFinite(o.max)?o.max:null,o.minNotZero=V.isFinite(o.minNotZero)?o.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=On(e.min,t.min),t.max=On(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(Fn(t.min))-1),t.max=Math.pow(10,Math.floor(Fn(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(Fn(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(Fn(t.min))+1):10),null===t.minNotZero&&(t.min>0?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(Fn(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:On(e.min),max:On(e.max)},a=t.ticks=function(t,e){var n,i,a=[],r=In(t.min,Math.pow(10,Math.floor(Fn(e.min)))),o=Math.floor(Fn(e.max)),s=Math.ceil(e.max/Math.pow(10,o));0===r?(n=Math.floor(Fn(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),a.push(r),r=i*Math.pow(10,n)):(n=Math.floor(Fn(r)),i=Math.floor(r/Math.pow(10,n)));var l=n<0?Math.pow(10,Math.abs(n)):1;do{a.push(r),10===++i&&(i=1,l=++n>=0?1:l),r=Math.round(i*Math.pow(10,n)*l)/l}while(n<o||n===o&&i<s);var u=In(t.max,r);return a.push(u),a}(i,t);t.max=V.max(a),t.min=V.min(a),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&a.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),xn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){var e=this.tickValues;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])},_getFirstTickValue:function(t){var e=Math.floor(Fn(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},_configure:function(){var t=this,e=t.min,n=0;xn.prototype._configure.call(t),0===e&&(e=t._getFirstTickValue(t.minNotZero),n=In(t.options.ticks.fontSize,z.global.defaultFontSize)/t._length),t._startValue=Fn(e),t._valueOffset=n,t._valueRange=(Fn(t.max)-Fn(e))/(1-n)},getPixelForValue:function(t){var e=this,n=0;return(t=+e.getRightValue(t))>e.min&&t>0&&(n=(Fn(t)-e._startValue)/e._valueRange+e._valueOffset),e.getPixelForDecimal(n)},getValueForPixel:function(t){var e=this,n=e.getDecimalForPixel(t);return 0===n&&0===e.min?0:Math.pow(10,e._startValue+(n-e._valueOffset)*e._valueRange)}}),zn=Ln;Rn._defaults=zn;var Nn=V.valueOrDefault,Bn=V.valueAtIndexOrDefault,En=V.options.resolve,Wn={display:!0,animate:!0,position:\"chartArea\",angleLines:{display:!0,color:\"rgba(0,0,0,0.1)\",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:\"rgba(255,255,255,0.75)\",backdropPaddingY:2,backdropPaddingX:2,callback:rn.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Vn(t){var e=t.ticks;return e.display&&t.display?Nn(e.fontSize,z.global.defaultFontSize)+2*e.backdropPaddingY:0}function Hn(t,e,n,i,a){return t===i||t===a?{start:e-n/2,end:e+n/2}:t<i||t>a?{start:e-n,end:e}:{start:e,end:e+n}}function jn(t){return 0===t||180===t?\"center\":t<180?\"left\":\"right\"}function qn(t,e,n,i){var a,r,o=n.y+i/2;if(V.isArray(e))for(a=0,r=e.length;a<r;++a)t.fillText(e[a],n.x,o),o+=i;else t.fillText(e,n.x,o)}function Un(t,e,n){90===t||270===t?n.y-=e.h/2:(t>270||t<90)&&(n.y-=e.h)}function Yn(t){return V.isNumber(t)?t:0}var Gn=Sn.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Vn(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var t=this,e=t.chart,n=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;V.each(e.data.datasets,(function(a,r){if(e.isDatasetVisible(r)){var o=e.getDatasetMeta(r);V.each(a.data,(function(e,a){var r=+t.getRightValue(e);isNaN(r)||o.data[a].hidden||(n=Math.min(r,n),i=Math.max(r,i))}))}})),t.min=n===Number.POSITIVE_INFINITY?0:n,t.max=i===Number.NEGATIVE_INFINITY?0:i,t.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Vn(this.options))},convertTicksToLabels:function(){var t=this;Sn.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map((function(){var e=V.callback(t.options.pointLabels.callback,arguments,t);return e||0===e?e:\"\"}))},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?function(t){var e,n,i,a=V.options._parseFont(t.options.pointLabels),r={l:0,r:t.width,t:0,b:t.height-t.paddingTop},o={};t.ctx.font=a.string,t._pointLabelSizes=[];var s,l,u,d=t.chart.data.labels.length;for(e=0;e<d;e++){i=t.getPointPosition(e,t.drawingArea+5),s=t.ctx,l=a.lineHeight,u=t.pointLabels[e],n=V.isArray(u)?{w:V.longestText(s,s.font,u),h:u.length*l}:{w:s.measureText(u).width,h:l},t._pointLabelSizes[e]=n;var h=t.getIndexAngle(e),c=V.toDegrees(h)%360,f=Hn(c,i.x,n.w,0,180),g=Hn(c,i.y,n.h,90,270);f.start<r.l&&(r.l=f.start,o.l=h),f.end>r.r&&(r.r=f.end,o.r=h),g.start<r.t&&(r.t=g.start,o.t=h),g.end>r.b&&(r.b=g.end,o.b=h)}t.setReductions(t.drawingArea,r,o)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,a=e.l/Math.sin(n.l),r=Math.max(e.r-i.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b);a=Yn(a),r=Yn(r),o=Yn(o),s=Yn(s),i.drawingArea=Math.min(Math.floor(t-(a+r)/2),Math.floor(t-(o+s)/2)),i.setCenterPoint(a,r,o,s)},setCenterPoint:function(t,e,n,i){var a=this,r=a.width-e-a.drawingArea,o=t+a.drawingArea,s=n+a.drawingArea,l=a.height-a.paddingTop-i-a.drawingArea;a.xCenter=Math.floor((o+r)/2+a.left),a.yCenter=Math.floor((s+l)/2+a.top+a.paddingTop)},getIndexAngle:function(t){var e=this.chart,n=(t*(360/e.data.labels.length)+((e.options||{}).startAngle||0))%360;return(n<0?n+360:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(V.isNullOrUndef(t))return NaN;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(t){var e=this.min,n=this.max;return this.getPointPositionForValue(t||0,this.beginAtZero?0:e<0&&n<0?n:e>0&&n>0?e:0)},_drawGrid:function(){var t,e,n,i=this,a=i.ctx,r=i.options,o=r.gridLines,s=r.angleLines,l=Nn(s.lineWidth,o.lineWidth),u=Nn(s.color,o.color);if(r.pointLabels.display&&function(t){var e=t.ctx,n=t.options,i=n.pointLabels,a=Vn(n),r=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),o=V.options._parseFont(i);e.save(),e.font=o.string,e.textBaseline=\"middle\";for(var s=t.chart.data.labels.length-1;s>=0;s--){var l=0===s?a/2:0,u=t.getPointPosition(s,r+l+5),d=Bn(i.fontColor,s,z.global.defaultFontColor);e.fillStyle=d;var h=t.getIndexAngle(s),c=V.toDegrees(h);e.textAlign=jn(c),Un(c,t._pointLabelSizes[s],u),qn(e,t.pointLabels[s],u,o.lineHeight)}e.restore()}(i),o.display&&V.each(i.ticks,(function(t,n){0!==n&&(e=i.getDistanceFromCenterForValue(i.ticksAsNumbers[n]),function(t,e,n,i){var a,r=t.ctx,o=e.circular,s=t.chart.data.labels.length,l=Bn(e.color,i-1),u=Bn(e.lineWidth,i-1);if((o||s)&&l&&u){if(r.save(),r.strokeStyle=l,r.lineWidth=u,r.setLineDash&&(r.setLineDash(e.borderDash||[]),r.lineDashOffset=e.borderDashOffset||0),r.beginPath(),o)r.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{a=t.getPointPosition(0,n),r.moveTo(a.x,a.y);for(var d=1;d<s;d++)a=t.getPointPosition(d,n),r.lineTo(a.x,a.y)}r.closePath(),r.stroke(),r.restore()}}(i,o,e,n))})),s.display&&l&&u){for(a.save(),a.lineWidth=l,a.strokeStyle=u,a.setLineDash&&(a.setLineDash(En([s.borderDash,o.borderDash,[]])),a.lineDashOffset=En([s.borderDashOffset,o.borderDashOffset,0])),t=i.chart.data.labels.length-1;t>=0;t--)e=i.getDistanceFromCenterForValue(r.ticks.reverse?i.min:i.max),n=i.getPointPosition(t,e),a.beginPath(),a.moveTo(i.xCenter,i.yCenter),a.lineTo(n.x,n.y),a.stroke();a.restore()}},_drawLabels:function(){var t=this,e=t.ctx,n=t.options.ticks;if(n.display){var i,a,r=t.getIndexAngle(0),o=V.options._parseFont(n),s=Nn(n.fontColor,z.global.defaultFontColor);e.save(),e.font=o.string,e.translate(t.xCenter,t.yCenter),e.rotate(r),e.textAlign=\"center\",e.textBaseline=\"middle\",V.each(t.ticks,(function(r,l){(0!==l||n.reverse)&&(i=t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]),n.showLabelBackdrop&&(a=e.measureText(r).width,e.fillStyle=n.backdropColor,e.fillRect(-a/2-n.backdropPaddingX,-i-o.size/2-n.backdropPaddingY,a+2*n.backdropPaddingX,o.size+2*n.backdropPaddingY)),e.fillStyle=s,e.fillText(r,0,-i))})),e.restore()}},_drawTitle:V.noop}),Xn=Wn;Gn._defaults=Xn;var Kn=V._deprecated,Zn=V.options.resolve,$n=V.valueOrDefault,Jn=Number.MIN_SAFE_INTEGER||-9007199254740991,Qn=Number.MAX_SAFE_INTEGER||9007199254740991,ti={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ei=Object.keys(ti);function ni(t,e){return t-e}function ii(t){return V.valueOrDefault(t.time.min,t.ticks.min)}function ai(t){return V.valueOrDefault(t.time.max,t.ticks.max)}function ri(t,e,n,i){var a=function(t,e,n){for(var i,a,r,o=0,s=t.length-1;o>=0&&o<=s;){if(a=t[(i=o+s>>1)-1]||null,r=t[i],!a)return{lo:null,hi:r};if(r[e]<n)o=i+1;else{if(!(a[e]>n))return{lo:a,hi:r};s=i-1}}return{lo:r,hi:null}}(t,e,n),r=a.lo?a.hi?a.lo:t[t.length-2]:t[0],o=a.lo?a.hi?a.hi:t[t.length-1]:t[1],s=o[e]-r[e],l=s?(n-r[e])/s:0,u=(o[i]-r[i])*l;return r[i]+u}function oi(t,e){var n=t._adapter,i=t.options.time,a=i.parser,r=a||i.format,o=e;return\"function\"==typeof a&&(o=a(o)),V.isFinite(o)||(o=\"string\"==typeof r?n.parse(o,r):n.parse(o)),null!==o?+o:(a||\"function\"!=typeof r||(o=r(e),V.isFinite(o)||(o=n.parse(o))),o)}function si(t,e){if(V.isNullOrUndef(e))return null;var n=t.options.time,i=oi(t,t.getRightValue(e));return null===i?i:(n.round&&(i=+t._adapter.startOf(i,n.round)),i)}function li(t,e,n,i){var a,r,o,s=ei.length;for(a=ei.indexOf(t);a<s-1;++a)if(o=(r=ti[ei[a]]).steps?r.steps:Qn,r.common&&Math.ceil((n-e)/(o*r.size))<=i)return ei[a];return ei[s-1]}function ui(t,e,n){var i,a,r=[],o={},s=e.length;for(i=0;i<s;++i)o[a=e[i]]=i,r.push({value:a,major:!1});return 0!==s&&n?function(t,e,n,i){var a,r,o=t._adapter,s=+o.startOf(e[0].value,i),l=e[e.length-1].value;for(a=s;a<=l;a=+o.add(a,1,i))(r=n[a])>=0&&(e[r].major=!0);return e}(t,r,o,n):r}var di=xn.extend({initialize:function(){this.mergeTicksOptions(),xn.prototype.initialize.call(this)},update:function(){var t=this,e=t.options,n=e.time||(e.time={}),i=t._adapter=new an._date(e.adapters.date);return Kn(\"time scale\",n.format,\"time.format\",\"time.parser\"),Kn(\"time scale\",n.min,\"time.min\",\"ticks.min\"),Kn(\"time scale\",n.max,\"time.max\",\"ticks.max\"),V.mergeIf(n.displayFormats,i.formats()),xn.prototype.update.apply(t,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),xn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,i,a,r,o,s=this,l=s.chart,u=s._adapter,d=s.options,h=d.time.unit||\"day\",c=Qn,f=Jn,g=[],p=[],m=[],v=s._getLabels();for(t=0,n=v.length;t<n;++t)m.push(si(s,v[t]));for(t=0,n=(l.data.datasets||[]).length;t<n;++t)if(l.isDatasetVisible(t))if(a=l.data.datasets[t].data,V.isObject(a[0]))for(p[t]=[],e=0,i=a.length;e<i;++e)r=si(s,a[e]),g.push(r),p[t][e]=r;else p[t]=m.slice(0),o||(g=g.concat(m),o=!0);else p[t]=[];m.length&&(c=Math.min(c,m[0]),f=Math.max(f,m[m.length-1])),g.length&&(g=n>1?function(t){var e,n,i,a={},r=[];for(e=0,n=t.length;e<n;++e)a[i=t[e]]||(a[i]=!0,r.push(i));return r}(g).sort(ni):g.sort(ni),c=Math.min(c,g[0]),f=Math.max(f,g[g.length-1])),c=si(s,ii(d))||c,f=si(s,ai(d))||f,c=c===Qn?+u.startOf(Date.now(),h):c,f=f===Jn?+u.endOf(Date.now(),h)+1:f,s.min=Math.min(c,f),s.max=Math.max(c+1,f),s._table=[],s._timestamps={data:g,datasets:p,labels:m}},buildTicks:function(){var t,e,n,i=this,a=i.min,r=i.max,o=i.options,s=o.ticks,l=o.time,u=i._timestamps,d=[],h=i.getLabelCapacity(a),c=s.source,f=o.distribution;for(u=\"data\"===c||\"auto\"===c&&\"series\"===f?u.data:\"labels\"===c?u.labels:function(t,e,n,i){var a,r=t._adapter,o=t.options,s=o.time,l=s.unit||li(s.minUnit,e,n,i),u=Zn([s.stepSize,s.unitStepSize,1]),d=\"week\"===l&&s.isoWeekday,h=e,c=[];if(d&&(h=+r.startOf(h,\"isoWeek\",d)),h=+r.startOf(h,d?\"day\":l),r.diff(n,e,l)>1e5*u)throw e+\" and \"+n+\" are too far apart with stepSize of \"+u+\" \"+l;for(a=h;a<n;a=+r.add(a,u,l))c.push(a);return a!==n&&\"ticks\"!==o.bounds||c.push(a),c}(i,a,r,h),\"ticks\"===o.bounds&&u.length&&(a=u[0],r=u[u.length-1]),a=si(i,ii(o))||a,r=si(i,ai(o))||r,t=0,e=u.length;t<e;++t)(n=u[t])>=a&&n<=r&&d.push(n);return i.min=a,i.max=r,i._unit=l.unit||(s.autoSkip?li(l.minUnit,i.min,i.max,h):function(t,e,n,i,a){var r,o;for(r=ei.length-1;r>=ei.indexOf(n);r--)if(o=ei[r],ti[o].common&&t._adapter.diff(a,i,o)>=e-1)return o;return ei[n?ei.indexOf(n):0]}(i,d.length,l.minUnit,i.min,i.max)),i._majorUnit=s.major.enabled&&\"year\"!==i._unit?function(t){for(var e=ei.indexOf(t)+1,n=ei.length;e<n;++e)if(ti[ei[e]].common)return ei[e]}(i._unit):void 0,i._table=function(t,e,n,i){if(\"linear\"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var a,r,o,s,l,u=[],d=[e];for(a=0,r=t.length;a<r;++a)(s=t[a])>e&&s<n&&d.push(s);for(d.push(n),a=0,r=d.length;a<r;++a)l=d[a+1],o=d[a-1],s=d[a],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:a/(r-1)});return u}(i._timestamps.data,a,r,f),i._offsets=function(t,e,n,i,a){var r,o,s=0,l=0;return a.offset&&e.length&&(r=ri(t,\"time\",e[0],\"pos\"),s=1===e.length?1-r:(ri(t,\"time\",e[1],\"pos\")-r)/2,o=ri(t,\"time\",e[e.length-1],\"pos\"),l=1===e.length?o:(o-ri(t,\"time\",e[e.length-2],\"pos\"))/2),{start:s,end:l,factor:1/(s+1+l)}}(i._table,d,0,0,o),s.reverse&&d.reverse(),ui(i,d,i._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,a=n.chart.data,r=n.options.time,o=a.labels&&t<a.labels.length?a.labels[t]:\"\",s=a.datasets[e].data[t];return V.isObject(s)&&(o=n.getRightValue(s)),r.tooltipFormat?i.format(oi(n,o),r.tooltipFormat):\"string\"==typeof o?o:i.format(oi(n,o),r.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var a=this._adapter,r=this.options,o=r.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],d=n[e],h=r.ticks,c=l&&u&&d&&d.major,f=a.format(t,i||(c?u:s)),g=c?h.major:h.minor,p=Zn([g.callback,g.userCallback,h.callback,h.userCallback]);return p?p(f,e,n):f},convertTicksToLabels:function(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(this.tickFormatFunction(t[e].value,e,t));return i},getPixelForOffset:function(t){var e=this._offsets,n=ri(this._table,\"time\",t,\"pos\");return this.getPixelForDecimal((e.start+n)*e.factor)},getPixelForValue:function(t,e,n){var i=null;if(void 0!==e&&void 0!==n&&(i=this._timestamps.datasets[n][e]),null===i&&(i=si(this,t)),null!==i)return this.getPixelForOffset(i)},getPixelForTick:function(t){var e=this.getTicks();return t>=0&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end,i=ri(this._table,\"pos\",n,\"time\");return this._adapter._create(i)},_getLabelSize:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,i=V.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),a=Math.cos(i),r=Math.sin(i),o=$n(e.fontSize,z.global.defaultFontSize);return{w:n*a+o*r,h:n*r+o*a}},getLabelWidth:function(t){return this._getLabelSize(t).w},getLabelCapacity:function(t){var e=this,n=e.options.time,i=n.displayFormats,a=i[n.unit]||i.millisecond,r=e.tickFormatFunction(t,0,ui(e,[t],e._majorUnit),a),o=e._getLabelSize(r),s=Math.floor(e.isHorizontal()?e.width/o.w:e.height/o.h);return e.options.offset&&s--,s>0?s:1}}),hi={position:\"bottom\",distribution:\"linear\",bounds:\"data\",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:\"millisecond\",displayFormats:{}},ticks:{autoSkip:!1,source:\"auto\",major:{enabled:!1}}};di._defaults=hi;var ci={category:_n,linear:Dn,logarithmic:Rn,radialLinear:Gn,time:di},fi={datetime:\"MMM D, YYYY, h:mm:ss a\",millisecond:\"h:mm:ss.SSS a\",second:\"h:mm:ss a\",minute:\"h:mm a\",hour:\"hA\",day:\"MMM D\",week:\"ll\",month:\"MMM YYYY\",quarter:\"[Q]Q - YYYY\",year:\"YYYY\"};an._date.override(\"function\"==typeof t?{_id:\"moment\",formats:function(){return fi},parse:function(e,n){return\"string\"==typeof e&&\"string\"==typeof n?e=t(e,n):e instanceof t||(e=t(e)),e.isValid()?e.valueOf():null},format:function(e,n){return t(e).format(n)},add:function(e,n,i){return t(e).add(n,i).valueOf()},diff:function(e,n,i){return t(e).diff(t(n),i)},startOf:function(e,n,i){return e=t(e),\"isoWeek\"===n?e.isoWeekday(i).valueOf():e.startOf(n).valueOf()},endOf:function(e,n){return t(e).endOf(n).valueOf()},_create:function(e){return t(e)}}:{}),z._set(\"global\",{plugins:{filler:{propagate:!0}}});var gi={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),a=i&&n.isDatasetVisible(e)&&i.dataset._children||[],r=a.length||0;return r?function(t,e){return e<r&&a[e]._view||null}:null},boundary:function(t){var e=t.boundary,n=e?e.x:null,i=e?e.y:null;return V.isArray(e)?function(t,n){return e[n]}:function(t){return{x:null===n?t.x:n,y:null===i?t.y:i}}}};function pi(t,e,n){var i,a=t._model||{},r=a.fill;if(void 0===r&&(r=!!a.backgroundColor),!1===r||null===r)return!1;if(!0===r)return\"origin\";if(i=parseFloat(r,10),isFinite(i)&&Math.floor(i)===i)return\"-\"!==r[0]&&\"+\"!==r[0]||(i=e+i),!(i===e||i<0||i>=n)&&i;switch(r){case\"bottom\":return\"start\";case\"top\":return\"end\";case\"zero\":return\"origin\";case\"origin\":case\"start\":case\"end\":return r;default:return!1}}function mi(t){return(t.el._scale||{}).getPointPositionForValue?function(t){var e,n,i,a,r,o=t.el._scale,s=o.options,l=o.chart.data.labels.length,u=t.fill,d=[];if(!l)return null;for(e=s.ticks.reverse?o.max:o.min,n=s.ticks.reverse?o.min:o.max,i=o.getPointPositionForValue(0,e),a=0;a<l;++a)r=\"start\"===u||\"end\"===u?o.getPointPositionForValue(a,\"start\"===u?e:n):o.getBasePosition(a),s.gridLines.circular&&(r.cx=i.x,r.cy=i.y,r.angle=o.getIndexAngle(a)-Math.PI/2),d.push(r);return d}(t):function(t){var e,n=t.el._model||{},i=t.el._scale||{},a=t.fill,r=null;if(isFinite(a))return null;if(\"start\"===a?r=void 0===n.scaleBottom?i.bottom:n.scaleBottom:\"end\"===a?r=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?r=n.scaleZero:i.getBasePixel&&(r=i.getBasePixel()),null!=r){if(void 0!==r.x&&void 0!==r.y)return r;if(V.isFinite(r))return{x:(e=i.isHorizontal())?r:null,y:e?null:r}}return null}(t)}function vi(t,e,n){var i,a=t[e].fill,r=[e];if(!n)return a;for(;!1!==a&&-1===r.indexOf(a);){if(!isFinite(a))return a;if(!(i=t[a]))return!1;if(i.visible)return a;r.push(a),a=i.fill}return!1}function bi(t){var e=t.fill,n=\"dataset\";return!1===e?null:(isFinite(e)||(n=\"boundary\"),gi[n](t))}function xi(t){return t&&!t.skip}function yi(t,e,n,i,a){var r,o,s,l;if(i&&a){for(t.moveTo(e[0].x,e[0].y),r=1;r<i;++r)V.canvas.lineTo(t,e[r-1],e[r]);if(void 0===n[0].angle)for(t.lineTo(n[a-1].x,n[a-1].y),r=a-1;r>0;--r)V.canvas.lineTo(t,n[r],n[r-1],!0);else for(o=n[0].cx,s=n[0].cy,l=Math.sqrt(Math.pow(n[0].x-o,2)+Math.pow(n[0].y-s,2)),r=a-1;r>0;--r)t.arc(o,s,l,n[r].angle,n[r-1].angle,!0)}}function _i(t,e,n,i,a,r){var o,s,l,u,d,h,c,f,g=e.length,p=i.spanGaps,m=[],v=[],b=0,x=0;for(t.beginPath(),o=0,s=g;o<s;++o)d=n(u=e[l=o%g]._view,l,i),h=xi(u),c=xi(d),r&&void 0===f&&h&&(s=g+(f=o+1)),h&&c?(b=m.push(u),x=v.push(d)):b&&x&&(p?(h&&m.push(u),c&&v.push(d)):(yi(t,m,v,b,x),b=x=0,m=[],v=[]));yi(t,m,v,b,x),t.closePath(),t.fillStyle=a,t.fill()}var ki={id:\"filler\",afterDatasetsUpdate:function(t,e){var n,i,a,r,o=(t.data.datasets||[]).length,s=e.propagate,l=[];for(i=0;i<o;++i)r=null,(a=(n=t.getDatasetMeta(i)).dataset)&&a._model&&a instanceof _t.Line&&(r={visible:t.isDatasetVisible(i),fill:pi(a,i,o),chart:t,el:a}),n.$filler=r,l.push(r);for(i=0;i<o;++i)(r=l[i])&&(r.fill=vi(l,i,s),r.boundary=mi(r),r.mapper=bi(r))},beforeDatasetsDraw:function(t){var e,n,i,a,r,o,s,l=t._getSortedVisibleDatasetMetas(),u=t.ctx;for(n=l.length-1;n>=0;--n)(e=l[n].$filler)&&e.visible&&(a=(i=e.el)._view,r=i._children||[],o=e.mapper,s=a.backgroundColor||z.global.defaultColor,o&&s&&r.length&&(V.canvas.clipArea(u,t.chartArea),_i(u,r,o,a,s,i._loop),V.canvas.unclipArea(u)))}},wi=V.rtl.getRtlAdapter,Mi=V.noop,Si=V.valueOrDefault;function Ci(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}z._set(\"global\",{legend:{display:!0,position:\"top\",align:\"center\",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,a=i.getDatasetMeta(n);a.hidden=null===a.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(t){var e=t.data.datasets,n=t.options.legend||{},i=n.labels&&n.labels.usePointStyle;return t._getSortedDatasetMetas().map((function(n){var a=n.controller.getStyle(i?0:void 0);return{text:e[n.index].label,fillStyle:a.backgroundColor,hidden:!t.isDatasetVisible(n.index),lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:a.borderWidth,strokeStyle:a.borderColor,pointStyle:a.pointStyle,rotation:a.rotation,datasetIndex:n.index}}),this)}}},legendCallback:function(t){var e,n,i,a=document.createElement(\"ul\"),r=t.data.datasets;for(a.setAttribute(\"class\",t.id+\"-legend\"),e=0,n=r.length;e<n;e++)(i=a.appendChild(document.createElement(\"li\"))).appendChild(document.createElement(\"span\")).style.backgroundColor=r[e].backgroundColor,r[e].label&&i.appendChild(document.createTextNode(r[e].label));return a.outerHTML}});var Pi=X.extend({initialize:function(t){V.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:Mi,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Mi,beforeSetDimensions:Mi,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Mi,beforeBuildLabels:Mi,buildLabels:function(){var t=this,e=t.options.labels||{},n=V.callback(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter((function(n){return e.filter(n,t.chart.data)}))),t.options.reverse&&n.reverse(),t.legendItems=n},afterBuildLabels:Mi,beforeFit:Mi,fit:function(){var t=this,e=t.options,n=e.labels,i=e.display,a=t.ctx,r=V.options._parseFont(n),o=r.size,s=t.legendHitBoxes=[],l=t.minSize,u=t.isHorizontal();if(u?(l.width=t.maxWidth,l.height=i?10:0):(l.width=i?10:0,l.height=t.maxHeight),i){if(a.font=r.string,u){var d=t.lineWidths=[0],h=0;a.textAlign=\"left\",a.textBaseline=\"middle\",V.each(t.legendItems,(function(t,e){var i=Ci(n,o)+o/2+a.measureText(t.text).width;(0===e||d[d.length-1]+i+2*n.padding>l.width)&&(h+=o+n.padding,d[d.length-(e>0?0:1)]=0),s[e]={left:0,top:0,width:i,height:o},d[d.length-1]+=i+n.padding})),l.height+=h}else{var c=n.padding,f=t.columnWidths=[],g=t.columnHeights=[],p=n.padding,m=0,v=0;V.each(t.legendItems,(function(t,e){var i=Ci(n,o)+o/2+a.measureText(t.text).width;e>0&&v+o+2*c>l.height&&(p+=m+n.padding,f.push(m),g.push(v),m=0,v=0),m=Math.max(m,i),v+=o+c,s[e]={left:0,top:0,width:i,height:o}})),p+=m,f.push(m),g.push(v),l.width+=p}t.width=l.width,t.height=l.height}else t.width=l.width=t.height=l.height=0},afterFit:Mi,isHorizontal:function(){return\"top\"===this.options.position||\"bottom\"===this.options.position},draw:function(){var t=this,e=t.options,n=e.labels,i=z.global,a=i.defaultColor,r=i.elements.line,o=t.height,s=t.columnHeights,l=t.width,u=t.lineWidths;if(e.display){var d,h=wi(e.rtl,t.left,t.minSize.width),c=t.ctx,f=Si(n.fontColor,i.defaultFontColor),g=V.options._parseFont(n),p=g.size;c.textAlign=h.textAlign(\"left\"),c.textBaseline=\"middle\",c.lineWidth=.5,c.strokeStyle=f,c.fillStyle=f,c.font=g.string;var m=Ci(n,p),v=t.legendHitBoxes,b=function(t,i){switch(e.align){case\"start\":return n.padding;case\"end\":return t-i;default:return(t-i+n.padding)/2}},x=t.isHorizontal();d=x?{x:t.left+b(l,u[0]),y:t.top+n.padding,line:0}:{x:t.left+n.padding,y:t.top+b(o,s[0]),line:0},V.rtl.overrideTextDirection(t.ctx,e.textDirection);var y=p+n.padding;V.each(t.legendItems,(function(e,i){var f=c.measureText(e.text).width,g=m+p/2+f,_=d.x,k=d.y;h.setWidth(t.minSize.width),x?i>0&&_+g+n.padding>t.left+t.minSize.width&&(k=d.y+=y,d.line++,_=d.x=t.left+b(l,u[d.line])):i>0&&k+y>t.top+t.minSize.height&&(_=d.x=_+t.columnWidths[d.line]+n.padding,d.line++,k=d.y=t.top+b(o,s[d.line]));var w=h.x(_);!function(t,e,i){if(!(isNaN(m)||m<=0)){c.save();var o=Si(i.lineWidth,r.borderWidth);if(c.fillStyle=Si(i.fillStyle,a),c.lineCap=Si(i.lineCap,r.borderCapStyle),c.lineDashOffset=Si(i.lineDashOffset,r.borderDashOffset),c.lineJoin=Si(i.lineJoin,r.borderJoinStyle),c.lineWidth=o,c.strokeStyle=Si(i.strokeStyle,a),c.setLineDash&&c.setLineDash(Si(i.lineDash,r.borderDash)),n&&n.usePointStyle){var s=m*Math.SQRT2/2,l=h.xPlus(t,m/2),u=e+p/2;V.canvas.drawPoint(c,i.pointStyle,s,l,u,i.rotation)}else c.fillRect(h.leftForLtr(t,m),e,m,p),0!==o&&c.strokeRect(h.leftForLtr(t,m),e,m,p);c.restore()}}(w,k,e),v[i].left=h.leftForLtr(w,v[i].width),v[i].top=k,function(t,e,n,i){var a=p/2,r=h.xPlus(t,m+a),o=e+a;c.fillText(n.text,r,o),n.hidden&&(c.beginPath(),c.lineWidth=2,c.moveTo(r,o),c.lineTo(h.xPlus(r,i),o),c.stroke())}(w,k,e,f),x?d.x+=g+n.padding:d.y+=y})),V.rtl.restoreTextDirection(t.ctx,e.textDirection)}},_getLegendItemAt:function(t,e){var n,i,a,r=this;if(t>=r.left&&t<=r.right&&e>=r.top&&e<=r.bottom)for(a=r.legendHitBoxes,n=0;n<a.length;++n)if(t>=(i=a[n]).left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return r.legendItems[n];return null},handleEvent:function(t){var e,n=this,i=n.options,a=\"mouseup\"===t.type?\"click\":t.type;if(\"mousemove\"===a){if(!i.onHover&&!i.onLeave)return}else{if(\"click\"!==a)return;if(!i.onClick)return}e=n._getLegendItemAt(t.x,t.y),\"click\"===a?e&&i.onClick&&i.onClick.call(n,t.native,e):(i.onLeave&&e!==n._hoveredItem&&(n._hoveredItem&&i.onLeave.call(n,t.native,n._hoveredItem),n._hoveredItem=e),i.onHover&&e&&i.onHover.call(n,t.native,e))}});function Ai(t,e){var n=new Pi({ctx:t.ctx,options:e,chart:t});ge.configure(t,n,e),ge.addBox(t,n),t.legend=n}var Di={id:\"legend\",_element:Pi,beforeInit:function(t){var e=t.options.legend;e&&Ai(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(V.mergeIf(e,z.global.legend),n?(ge.configure(t,n,e),n.options=e):Ai(t,e)):n&&(ge.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},Ti=V.noop;z._set(\"global\",{title:{display:!1,fontStyle:\"bold\",fullWidth:!0,padding:10,position:\"top\",text:\"\",weight:2e3}});var Ii=X.extend({initialize:function(t){V.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:Ti,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ti,beforeSetDimensions:Ti,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ti,beforeBuildLabels:Ti,buildLabels:Ti,afterBuildLabels:Ti,beforeFit:Ti,fit:function(){var t,e=this,n=e.options,i=e.minSize={},a=e.isHorizontal();n.display?(t=(V.isArray(n.text)?n.text.length:1)*V.options._parseFont(n).lineHeight+2*n.padding,e.width=i.width=a?e.maxWidth:t,e.height=i.height=a?t:e.maxHeight):e.width=i.width=e.height=i.height=0},afterFit:Ti,isHorizontal:function(){var t=this.options.position;return\"top\"===t||\"bottom\"===t},draw:function(){var t=this,e=t.ctx,n=t.options;if(n.display){var i,a,r,o=V.options._parseFont(n),s=o.lineHeight,l=s/2+n.padding,u=0,d=t.top,h=t.left,c=t.bottom,f=t.right;e.fillStyle=V.valueOrDefault(n.fontColor,z.global.defaultFontColor),e.font=o.string,t.isHorizontal()?(a=h+(f-h)/2,r=d+l,i=f-h):(a=\"left\"===n.position?h+l:f-l,r=d+(c-d)/2,i=c-d,u=Math.PI*(\"left\"===n.position?-.5:.5)),e.save(),e.translate(a,r),e.rotate(u),e.textAlign=\"center\",e.textBaseline=\"middle\";var g=n.text;if(V.isArray(g))for(var p=0,m=0;m<g.length;++m)e.fillText(g[m],0,p,i),p+=s;else e.fillText(g,0,0,i);e.restore()}}});function Fi(t,e){var n=new Ii({ctx:t.ctx,options:e,chart:t});ge.configure(t,n,e),ge.addBox(t,n),t.titleBlock=n}var Li={},Oi=ki,Ri=Di,zi={id:\"title\",_element:Ii,beforeInit:function(t){var e=t.options.title;e&&Fi(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(V.mergeIf(e,z.global.title),n?(ge.configure(t,n,e),n.options=e):Fi(t,e)):n&&(ge.removeBox(t,n),delete t.titleBlock)}};for(var Ni in Li.filler=Oi,Li.legend=Ri,Li.title=zi,tn.helpers=V,function(){function t(t,e,n){var i;return\"string\"==typeof t?(i=parseInt(t,10),-1!==t.indexOf(\"%\")&&(i=i/100*e.parentNode[n])):i=t,i}function e(t){return null!=t&&\"none\"!==t}function n(n,i,a){var r=document.defaultView,o=V._getParentNode(n),s=r.getComputedStyle(n)[i],l=r.getComputedStyle(o)[i],u=e(s),d=e(l),h=Number.POSITIVE_INFINITY;return u||d?Math.min(u?t(s,n,a):h,d?t(l,o,a):h):\"none\"}V.where=function(t,e){if(V.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return V.each(t,(function(t){e(t)&&n.push(t)})),n},V.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,a=t.length;i<a;++i)if(e.call(n,t[i],i,t))return i;return-1},V.findNextWhere=function(t,e,n){V.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var a=t[i];if(e(a))return a}},V.findPreviousWhere=function(t,e,n){V.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;i>=0;i--){var a=t[i];if(e(a))return a}},V.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},V.almostEquals=function(t,e,n){return Math.abs(t-e)<n},V.almostWhole=function(t,e){var n=Math.round(t);return n-e<=t&&n+e>=t},V.max=function(t){return t.reduce((function(t,e){return isNaN(e)?t:Math.max(t,e)}),Number.NEGATIVE_INFINITY)},V.min=function(t){return t.reduce((function(t,e){return isNaN(e)?t:Math.min(t,e)}),Number.POSITIVE_INFINITY)},V.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0===(t=+t)||isNaN(t)?t:t>0?1:-1},V.toRadians=function(t){return t*(Math.PI/180)},V.toDegrees=function(t){return t*(180/Math.PI)},V._decimalPlaces=function(t){if(V.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},V.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,a=Math.sqrt(n*n+i*i),r=Math.atan2(i,n);return r<-.5*Math.PI&&(r+=2*Math.PI),{angle:r,distance:a}},V.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},V.aliasPixel=function(t){return t%2==0?0:.5},V._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,a=n/2;return Math.round((e-a)*i)/i+a},V.splineCurve=function(t,e,n,i){var a=t.skip?e:t,r=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(r.x-a.x,2)+Math.pow(r.y-a.y,2)),l=Math.sqrt(Math.pow(o.x-r.x,2)+Math.pow(o.y-r.y,2)),u=s/(s+l),d=l/(s+l),h=i*(u=isNaN(u)?0:u),c=i*(d=isNaN(d)?0:d);return{previous:{x:r.x-h*(o.x-a.x),y:r.y-h*(o.y-a.y)},next:{x:r.x+c*(o.x-a.x),y:r.y+c*(o.y-a.y)}}},V.EPSILON=Number.EPSILON||1e-14,V.splineCurveMonotone=function(t){var e,n,i,a,r,o,s,l,u,d=(t||[]).map((function(t){return{model:t._model,deltaK:0,mK:0}})),h=d.length;for(e=0;e<h;++e)if(!(i=d[e]).model.skip){if(n=e>0?d[e-1]:null,(a=e<h-1?d[e+1]:null)&&!a.model.skip){var c=a.model.x-i.model.x;i.deltaK=0!==c?(a.model.y-i.model.y)/c:0}!n||n.model.skip?i.mK=i.deltaK:!a||a.model.skip?i.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(i.deltaK)?i.mK=0:i.mK=(n.deltaK+i.deltaK)/2}for(e=0;e<h-1;++e)i=d[e],a=d[e+1],i.model.skip||a.model.skip||(V.almostEquals(i.deltaK,0,this.EPSILON)?i.mK=a.mK=0:(r=i.mK/i.deltaK,o=a.mK/i.deltaK,(l=Math.pow(r,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),i.mK=r*s*i.deltaK,a.mK=o*s*i.deltaK)));for(e=0;e<h;++e)(i=d[e]).model.skip||(n=e>0?d[e-1]:null,a=e<h-1?d[e+1]:null,n&&!n.model.skip&&(u=(i.model.x-n.model.x)/3,i.model.controlPointPreviousX=i.model.x-u,i.model.controlPointPreviousY=i.model.y-u*i.mK),a&&!a.model.skip&&(u=(a.model.x-i.model.x)/3,i.model.controlPointNextX=i.model.x+u,i.model.controlPointNextY=i.model.y+u*i.mK))},V.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},V.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},V.niceNum=function(t,e){var n=Math.floor(V.log10(t)),i=t/Math.pow(10,n);return(e?i<1.5?1:i<3?2:i<7?5:10:i<=1?1:i<=2?2:i<=5?5:10)*Math.pow(10,n)},V.requestAnimFrame=\"undefined\"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},V.getRelativePosition=function(t,e){var n,i,a=t.originalEvent||t,r=t.target||t.srcElement,o=r.getBoundingClientRect(),s=a.touches;s&&s.length>0?(n=s[0].clientX,i=s[0].clientY):(n=a.clientX,i=a.clientY);var l=parseFloat(V.getStyle(r,\"padding-left\")),u=parseFloat(V.getStyle(r,\"padding-top\")),d=parseFloat(V.getStyle(r,\"padding-right\")),h=parseFloat(V.getStyle(r,\"padding-bottom\")),c=o.right-o.left-l-d,f=o.bottom-o.top-u-h;return{x:n=Math.round((n-o.left-l)/c*r.width/e.currentDevicePixelRatio),y:i=Math.round((i-o.top-u)/f*r.height/e.currentDevicePixelRatio)}},V.getConstraintWidth=function(t){return n(t,\"max-width\",\"clientWidth\")},V.getConstraintHeight=function(t){return n(t,\"max-height\",\"clientHeight\")},V._calculatePadding=function(t,e,n){return(e=V.getStyle(t,e)).indexOf(\"%\")>-1?n*parseInt(e,10)/100:parseInt(e,10)},V._getParentNode=function(t){var e=t.parentNode;return e&&\"[object ShadowRoot]\"===e.toString()&&(e=e.host),e},V.getMaximumWidth=function(t){var e=V._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=n-V._calculatePadding(e,\"padding-left\",n)-V._calculatePadding(e,\"padding-right\",n),a=V.getConstraintWidth(t);return isNaN(a)?i:Math.min(i,a)},V.getMaximumHeight=function(t){var e=V._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=n-V._calculatePadding(e,\"padding-top\",n)-V._calculatePadding(e,\"padding-bottom\",n),a=V.getConstraintHeight(t);return isNaN(a)?i:Math.min(i,a)},V.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},V.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||\"undefined\"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var i=t.canvas,a=t.height,r=t.width;i.height=a*n,i.width=r*n,t.ctx.scale(n,n),i.style.height||i.style.width||(i.style.height=a+\"px\",i.style.width=r+\"px\")}},V.fontString=function(t,e,n){return e+\" \"+t+\"px \"+n},V.longestText=function(t,e,n,i){var a=(i=i||{}).data=i.data||{},r=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(a=i.data={},r=i.garbageCollect=[],i.font=e),t.font=e;var o,s,l,u,d,h=0,c=n.length;for(o=0;o<c;o++)if(null!=(u=n[o])&&!0!==V.isArray(u))h=V.measureText(t,a,r,h,u);else if(V.isArray(u))for(s=0,l=u.length;s<l;s++)null==(d=u[s])||V.isArray(d)||(h=V.measureText(t,a,r,h,d));var f=r.length/2;if(f>n.length){for(o=0;o<f;o++)delete a[r[o]];r.splice(0,f)}return h},V.measureText=function(t,e,n,i,a){var r=e[a];return r||(r=e[a]=t.measureText(a).width,n.push(a)),r>i&&(i=r),i},V.numberOfLabelLines=function(t){var e=1;return V.each(t,(function(t){V.isArray(t)&&t.length>e&&(e=t.length)})),e},V.color=k?function(t){return t instanceof CanvasGradient&&(t=z.global.defaultColor),k(t)}:function(t){return console.error(\"Color.js not found!\"),t},V.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:V.color(t).saturate(.5).darken(.1).rgbString()}}(),tn._adapters=an,tn.Animation=Z,tn.animationService=$,tn.controllers=$t,tn.DatasetController=nt,tn.defaults=z,tn.Element=X,tn.elements=_t,tn.Interaction=ae,tn.layouts=ge,tn.platform=Fe,tn.plugins=Le,tn.Scale=xn,tn.scaleService=Oe,tn.Ticks=rn,tn.Tooltip=Ue,tn.helpers.each(ci,(function(t,e){tn.scaleService.registerScaleType(e,t,t._defaults)})),Li)Li.hasOwnProperty(Ni)&&tn.plugins.register(Li[Ni]);tn.platform.initialize();var Bi=tn;return\"undefined\"!=typeof window&&(window.Chart=tn),tn.Chart=tn,tn.Legend=Li.legend._element,tn.Title=Li.title._element,tn.pluginService=tn.plugins,tn.PluginBase=tn.Element.extend({}),tn.canvasHelpers=tn.helpers.canvas,tn.layoutService=tn.layouts,tn.LinearScaleBase=Sn,tn.helpers.each([\"Bar\",\"Bubble\",\"Doughnut\",\"Line\",\"PolarArea\",\"Radar\",\"Scatter\"],(function(t){tn[t]=function(e,n){return new tn(e,tn.helpers.merge(n||{},{type:t.charAt(0).toLowerCase()+t.slice(1)}))}})),Bi}));\n","import Chart from 'chart.js/dist/Chart.min.js'\n","// **********************\n// open and close functionality\n// **********************\nconst modalClasses = {\n  freeze: {\n    class: 'body',\n    toggleClass: 'body_freeze-active'\n  },\n  blur: {\n    class: '.modal',\n    toggleClass: 'modal_visible'\n  },\n  modal: {\n    class: '.blur',\n    toggleClass: 'blur_blur-active'\n  }\n}\n\nconst buttonsAndContent = {\n  reportProblem: {\n    button: ['.reportProblem__button'],\n    content: ['.modal__reportProblem'],\n    visible: ['modal__reportProblem_visible']\n  },\n  countryChange: {\n    button: ['.nav__lang-country-flag'],\n    content: ['.modal__geoLocation-lists'],\n    visible: ['modal__geoLocation-lists_visible']\n  },\n  about: {\n    button: ['.nav__hamburger'],\n    content: ['.modal__about', '.modal__positionPushing-lists', '.modal__countryAlternative-lists'],\n    visible: ['modal__about_visible', 'modal__positionPushing-lists_visible', 'modal__countryAlternative-lists_visible']\n  }\n}\n\nconst hamburgerBtn = document.querySelector('.hamburger')\nconst modal = document.querySelector('.modal')\nconst submitBtn = document.querySelector('.modal__reportProblem-description-button')\n\nconst toggleModal = function () {\n  for (const key in modalClasses) {\n    const element = modalClasses[key]\n    const modalclass = document.querySelector(element.class)\n    const toggleThisClass = element.toggleClass\n    modalclass.classList.toggle(toggleThisClass)\n  }\n}\n\nconst toggleModalContent = function (button) {\n  for (const i in buttonsAndContent) {\n    if (buttonsAndContent[i].button === button) {\n      for (let j = 0; j < buttonsAndContent[i].content.length; ++j) {\n        const toggleOnThisClass = document.querySelector(buttonsAndContent[i].content[j])\n        const toggleThisClass = buttonsAndContent[i].visible[j]\n        toggleOnThisClass.classList.toggle(toggleThisClass)\n      }\n    }\n  }\n}\n\n// buttons that can be used to open modal\nconst buttonsToOpenmodal = function () {\n  const buttonArray = []\n  for (const i in buttonsAndContent) {\n    buttonArray.push(buttonsAndContent[i].button)\n  }\n  return buttonArray\n}\n\nlet storeButton\n\nbuttonsToOpenmodal().forEach(button => {\n  const element = document.querySelector(button)\n  if (element) {\n    element.addEventListener('click', (event) => {\n      event.preventDefault()\n      toggleModal()\n      toggleModalContent(button)\n      storeButton = button\n    })\n  }\n})\n\n// close the modal with hamburger button click\nsubmitBtn.onclick = function (event) {\n  event.preventDefault()\n  toggleModal()\n  toggleModalContent(storeButton)\n}\n\n// close the modal with hamburger button click\nhamburgerBtn.onclick = function (event) {\n  event.preventDefault()\n  toggleModal()\n  toggleModalContent(storeButton)\n}\n\n// close the modal with window click\nwindow.onclick = function (event) {\n  event.preventDefault()\n  if (event.target == modal) {\n    toggleModal()\n    toggleModalContent(storeButton)\n  }\n}\n\n// **********************\n// send form problem report functionality\n// **********************\n\n\nconst reportProblemDescriptionButton = document.querySelector('.modal__reportProblem-description-button')\nlet isDescriptionReportButtonAlreadyclickedBefore = false\nconst reportProblemDescriptionHeader = datalayer.serviceView.modal.reportProblem.header\nconst reportProblemDescriptionParagraph = datalayer.serviceView.modal.reportProblem.paragraph\ndebugger;\nreportProblemDescriptionButton.addEventListener('click', (event) => {\n  event.preventDefault()\n\n  const reportData = {\n    type:'report-with-description',\n    languageCode: datalayer.language.code,\n    countryCode: datalayer.country.code,\n    nameHyphen: datalayer.service.nameHyphen,\n    cityName: datalayer.city.asciiNameHyphen,\n    description: document.querySelector('.modal__reportProblem-description-text').value\n  }\n\n  const currentURL = window.location.href\n  const url = `${currentURL}/report-problem`\n\n  if (!isDescriptionReportButtonAlreadyclickedBefore) {\n    fetch(url, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(reportData)\n    })\n  }\n  \n  isDescriptionReportButtonAlreadyclickedBefore = true\n  \n  let header = document.querySelector('.modal__reportProblem-header-text');\n  header.textContent = reportProblemDescriptionHeader;\n\n  let paragraph = document.querySelector('.modal__reportProblem-text');\n  paragraph.textContent = reportProblemDescriptionParagraph;\n  \n  let description = document.querySelector('.modal__reportProblem-description')\n  description.classList.toggle('modal__reportProblem-description_invisible', true)\n\n})\n","// service-down view\nmodule.exports = {\n  locals: {\n    viewLocals: {\n      doctype: {\n        language: 'en'\n      },\n\n      head: {\n        canonical: 'https://striped.com/at',\n        title: 'Is this service down??? Find out now',\n        description: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Sunt asperiores qui tempora repudiandae?',\n        relAlternate: [{\n          href: 'http://example.org/',\n          hrefLang: 'de-AT'\n        }, {\n          href: 'http://example.org/',\n          hrefLang: 'en-NL'\n        }, {\n          href: 'http://example.org/',\n          hrefLang: 'x-default'\n        }]\n      },\n\n      body: {\n\n        nav: {\n          links: {\n            logo: 'http://example.org/',\n            header: 'http://example.org/'\n          },\n          images: {\n            logo: '../../../dist/images/logos/this-company.svg',\n            flag: '../../../dist/images/flags/128-spain.svg'\n          },\n          text: {\n            header: 'IsItDown?'\n          },\n          alt: {\n            logo: 'logo',\n            flag: 'logo'\n          }\n        },\n\n        header: {\n          text: {\n            header: 'Facebook is currently down for 46 minutes'\n          },\n        },\n\n        downChart: {\n          text: {\n            header: 'Number of people that report that they experience problems'\n          }\n        },\n\n        reportProblem: {\n          text: {\n            header: 'Lorem ipsum dolor sit amet, consect etuer',\n            button: 'I\\'m experiencing problems with ...'\n          }\n\n        },\n\n        serviceDetails: {\n          text: {\n            header: 'Lorem 888 ipsum dolor',\n            paragraph: {\n              1: 'quaeraniam, quis nostrum exerci tationem ullam corporis suscipit',\n              2: 'cod quia consequuntur magni dolores eos qui ratio',\n              3: 'Lm t odit aut fugit, sed quia consequuntur magni dr sit amet, consec tetuer.',\n              4: 'color sit amet odit aut fugit, sed quia res eos qui rat '\n            }\n          },\n          images: {\n            service: '../../../dist/images/logos/facebook.svg'\n          },\n          alt: {\n            service: 'comp logo'\n          }\n\n        },\n\n        faq: {\n          text: {\n            header: 'Lorem ipsum dolor sit amet, consect etuer',\n\n            accordion: [{\n              question: 'langertermijn antwoord over hoevaak fb down?',\n              answer: {\n                1: 'Most unopened items in new condition and returned within <strong>90 days</strong> will receive a refund or exchange. Some items have a modified return policy noted on the receipt or packing slip. Items that are opened or damaged or do not have a receipt may be denied a refund or exchange. Items purchased online or in-store may be returned to any store. Online purchases may be returned via a major parcel carrier. <a href=\"http://example.com/returns\"> Click here </a> to initiate a return.',\n                2: 'color sit amet, consec. - link naar about nav '\n              }\n            }, {\n              question: 'Hoe vaak gaat Facebook down per jaar?',\n              answer: {\n                1: 'Lorem ipsum dolor sit amet, consec tetuer.',\n                2: 'color sit amet, consec. - link naar about nav '\n              }\n            }, {\n              question: 'Hoe doen andere sociale platformen het?',\n              answer: {\n                1: 'Lorem ipsum dolor sit amet, consectetuer.',\n                2: 'color sit amet, consec. - link naar about nav '\n              }\n            }]\n          }\n        },\n\n        about: {\n          text: {\n            header: 'Lorem ipsum dolor sit amet, consect etuer',\n            paragraph: {\n              1: 'Lorem ipsum dolor sit amet, consectetuer.',\n              2: 'color sit amet, consec. - link naar about nav ',\n              3: 'This site is protected by reCAPTCHA and the Google <a href=\"https://policies.google.com/privacy\" rel=\"nofollow\">Privacy Policy</a> and <a href=\"https://policies.google.com/terms\" rel=\"nofollow\">Terms of Service</a> apply.',\n              4: 'Lorem ipsum dolor sit amet, consectetuer.',\n              5: 'De site bestaat uit de volgende onderdelen en je bevind je nu op'\n            }\n          },\n          links: {\n            breadcrumb: [{\n              link: 'http://example.org/',\n              position: 1,\n              anchor: 'Lorem'\n            }, {\n              link: 'http://example.org/',\n              position: 2,\n              anchor: 'ipsum'\n            }, {\n              link: 'http://example.org/',\n              position: 3,\n              anchor: 'ipsum2'\n            }]\n          }\n        },\n\n        modal: {\n          about: {\n            text: {\n              header: 'Lorem ipsum dolor sit amet, consect etuer',\n              paragraph: {\n                1: 'https:// support.apple.com /en-us/HT210425 - Lorem ipsum dolor sit amet, consectetuer. Lorem ipsum dolor sit amet, consec.',\n                2: 'Lorem ipsum dolor sit amet, consec Lorem ipsum dolor sit amet, consec.'\n              }\n            },\n            images: {\n              logo: '../../../dist/images/logos/this-company.png'\n            },\n            alt: {\n              logo: 'logo of ...company name'\n            }\n\n          },\n          reportProblem: {\n            text: {\n              header: 'What isn\\'t working?',\n              paragraph: {\n                1: 'Please let us know what issue you are experiencing with Facebook.',\n                2: 'Please provide one or two words.',\n              },\n              button:'Submit',\n            }\n\n          },\n\n          geolocation: {\n            text: {\n              header: 'alle andere geo locaties',\n              paragraph: {\n                1: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Nihil recusandae modi alias.',\n                2: 'Animi inventore in iure nisi sed nihil doloremque!'\n              }\n            },\n            flags: [{\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }, {\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }, {\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }]\n          },\n\n          positionPushing: {\n            text: {\n              header: 'alle andere push pagina',\n              paragraph: {\n                1: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Nihil recusandae modi alias.',\n                2: 'Animi inventore in iure nisi sed nihil doloremque!'\n              }\n            },\n            flags: [{\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }, {\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }, {\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }]\n          },\n\n          countryAlternative: {\n            text: {\n              header: 'alle andere landhome pages',\n              paragraph: {\n                1: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Nihil recusandae modi alias.',\n                2: 'Animi inventore in iure nisi sed nihil doloremque!88'\n              }\n            },\n            flags: [{\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }, {\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }, {\n              link: 'https://stripe.com/at',\n              anchor: '1-AT',\n              img: '../../../dist/images/flags/128-spain.svg',\n              alt: 'test'\n            }]\n          }\n\n        },\n\n        advertisement: {\n          text: {\n            header: 'Lorem ipsum dolor sit amet, consectetuer'\n          }\n        },\n        \n        commentsSection: {\n          text: {\n            header: 'Dolor, sit amet consectetur adipisicing elit'\n          },\n          dataLocale: 'en_US'\n        },\n\n        datalayer: {\n         \n          /// ************ metadata ************ //\n          //typeOfPage:'service',\n\n          service: {\n            status: 1,\n            downSince: \"2020-05-21T15:44:00.000Z\",\n            nameCase: 'Facebook',\n            nameHyphen: 'clash-of-clans',\n            logoImage: '../../../dist/images/logos/facebook.svg',\n            logoImageAlt: 'twitter logo',\n          },\n            \n          seo: {\n            cumulativeSearchVolume: 9006,\n          },\n          \n          language: {\n            name: 'Dutch',\n            nameHyphen: 'dutch',\n            endonym: 'Nederlands',\n            code: 'en'\n          },\n          country: {\n            geonameCode: 12,\n            name: 'Netherlands',\n            nameHyphen: 'netherlands',\n            code: 'us',\n            flagImage: '../../../dist/images/flags/237-netherlands.svg',\n            flagImageAlt: 'the flag of the Netherlands'\n          },\n          state: {\n            geonameCode: 12,\n            name: 'Herat',\n            nameHyphen: 'herat',\n            asciiName: 'Herat',\n            asciiNameHyphen: 'herat',\n            code: 11\n          },\n          city: {\n            geonameCode: 12,\n            name: 'Zuidwijk',\n            nameHyphen: 'zuidwijk',\n            asciiName: 'Zuidwijk',\n            asciiNameHyphen: 'zuidwijk'\n          },\n          \n          // ************ service ************ //\n          serviceView:{\n            header:{\n              notDown:'Facebook is not experiencing problems',\n              maybeDown:'Facebook is maybe experiencing problems',\n              down: {\n                  noMinutes:'is experiencing problems',                  \n                  oneMinuteBegin: 'is experiencing problems for',\n                  oneMinuteEnd: 'minute',                  \n                  multibleMinutesBegin: 'is experiencing problems for',\n                  multibleMinutesEnd: 'minuten',\n                },\n              },\n\n            modal: {\n              reportProblem: {\n                  header: 'Thank you for your submittion!',\n                  paragraph: 'We received your submission',\n              }\n            },\n            downChart: {\n              labelNow:'now',\n              tooltipLabel: 'reports',\n              timeReportsSequence:[{\"count\":1,\"time\":\"2020-05-21T15:44:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T15:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T15:14:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T14:34:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T14:14:00.000Z\"},{\"count\":3,\"time\":\"2020-05-21T14:04:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T13:54:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T13:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T13:14:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T12:54:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T12:44:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T12:34:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T12:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T12:14:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T12:04:00.000Z\"},{\"count\":3,\"time\":\"2020-05-21T11:54:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T11:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T11:14:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T10:54:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T10:44:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T10:04:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T09:44:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T09:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T08:54:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T08:44:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T08:34:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T08:24:00.000Z\"},{\"count\":3,\"time\":\"2020-05-21T07:54:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T07:34:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T07:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T07:14:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T07:04:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T06:54:00.000Z\"},{\"count\":4,\"time\":\"2020-05-21T06:44:00.000Z\"},{\"count\":4,\"time\":\"2020-05-21T06:04:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T05:54:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T05:14:00.000Z\"},{\"count\":2,\"time\":\"2020-05-21T04:54:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T04:34:00.000Z\"},{\"count\":3,\"time\":\"2020-05-21T04:24:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T04:14:00.000Z\"},{\"count\":1,\"time\":\"2020-05-21T03:54:00.000Z\"}],\n            },\n            }, \n        },\n        \n          // ************ homepage ************ //\n          homepageView:{\n            header:{ \n              homepage:'This is page for spain',\n            }\n          },\n     }\n    }\n  }\n}\n","// is it better to use something like this?\nimport templateData from '../0-views/service/pug.config.js'\nconst dataLayer = templateData.locals.viewLocals.body.datalayer;\n\nfunction getMarkColor(status) {\n\n  if (status === 0) {\n    return \"header__mark_green\";\n  } else if (status === 0.5) {\n    return \"header__mark_orange\";\n  } else if (status === 1) {\n    return \"header__mark_red\";\n  }\n\n}\n\nfunction setMarkColor(color) {\n  document.querySelector(\".header__mark\").classList.toggle(getMarkColor(color));\n}\n\nsetMarkColor(datalayer.service.status);\n\n \n//           createHeaderText: function() {\n//             let headerText = \"\";\n//             for (let [key, value] of Object.entries(this.text)) {\n//               if (key === \"marked\") {\n//                 headerText = headerText.concat(\" \", \"<mark class=\\\"header__mark\\\">\" + value + \"</mark>\");\n//               } else {\n//                 headerText = headerText.concat(\" \", value);\n//               }\n//             }\n//             return headerText;\n//           }\n","const ctx = document.getElementById('downChart').getContext('2d')\n\nconst timeReportsSequence = datalayer.serviceView.downChart.timeReportsSequence\n\nconst maxTimeValue = Math.max.apply(Math, timeReportsSequence.map(function(object) { return Date.parse(object.time); }))\n// deze waardes zouden eigenlijk in een config file moeten zitten\nconst sequenceLength = 72;\nconst lastNumHours = 12;\nconst timeBlockLengthInMinutes = 10;\nconst msPerMinute = 60000;\n\n// add missing dates to sequence\nfor (let i = 0; i < sequenceLength; i++) {\n  let sequenceDate = new Date(maxTimeValue - (i * msPerMinute * timeBlockLengthInMinutes)).toISOString();\n  let reportCount = 0;\n  let conditinal = timeReportsSequence.some(e => e.time === sequenceDate)\n  if(!conditinal){\n    timeReportsSequence.push({count:0,time:sequenceDate})\n  }  \n}\n\n// add 10 minutes to all times in sequence\ntimeReportsSequence.forEach(date => {\n  date.time = new Date(Date.parse(date.time) + (timeBlockLengthInMinutes * msPerMinute))\n})\n\n// sort sequence\ntimeReportsSequence.sort(function compare(b, a) {\n  var dateA = new Date(a.time);\n  var dateB = new Date(b.time);\n  return dateA - dateB;\n});\n\n\n// quence to localtime en split to arrays\nconst localesOptions = {\n  hour: '2-digit', \n  minute: '2-digit',\n};  \n\nconst locales = {\n    languageCode: datalayer.language.code,\n    countryCode: datalayer.country.code,\n}\n\nlet timeLabels = [];\nlet sequenceOfReports = [];\ntimeReportsSequence.forEach(date => {\n  let count = date.count;\n  sequenceOfReports.push(count)\n  let time = new Date(date.time).toLocaleTimeString(`${locales.languageCode}-${locales.countryCode}`, localesOptions)\n  timeLabels.push(time)\n})\n\n\nconst data = {\n  labels: timeLabels,\n  datasets: [{\n    data: sequenceOfReports,\n    backgroundColor: null,\n    borderColor: null,\n    pointRadius: 0,\n    borderWidth: 3\n  }]\n}\n\nconst tooltipLabel = datalayer.serviceView.downChart.tooltipLabel\n\nconst options = {\n\n  defaultFontFamily: Chart.defaults.global.defaultFontFamily = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", Arial, sans-serif',\n\n  responsive: true,\n  aspectRatio: null,\n\n  tooltips: {\n    mode: 'nearest',\n    intersect: false,\n    callbacks: {\n          label: function(tooltipItems, data) { \n              return tooltipItems.yLabel + ' ' + tooltipLabel;\n          }\n      }\n  },\n\n  legend: {\n    display: false\n  },\n\n  scales: {\n    xAxes: [{\n      display: true,\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        reverse:true,\n        lineHeight: 2.5,\n      },\n    }],\n    yAxes: [{\n      display: true,\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        suggestedMin: 0,\n        suggestedMax: 50 //avgOfnumberOfReports*4\n      }\n    }]\n  }\n}\n\nconst chart = new Chart(ctx, {\n  type: 'line',\n  data: data,\n  options: options,\n  plugins: [{\n    id: 'defineDownChartValues',\n\n    afterLayout: function (chart) {\n      \n      const currentStatus = datalayer.service.status;\n      \n      (function setAspectRatio () {\n        const windowWidthInEm = window.innerWidth / parseFloat(getComputedStyle(document.querySelector('body'))['font-size'])\n        const aspectRatioNum = 0.725 + (windowWidthInEm * (1 / 55))\n\n        chart.aspectRatio = Math.min(2.25, Math.max(1, aspectRatioNum.toFixed(2)))\n      })()\n\n      function getBorderColor (status) {\n        if (status < 0.5) {\n          return 'rgba(0, 181, 63, 1)'\n        } else if (status >= 0.5 && status <= 0.7) {\n          return 'rgba(255, 102, 0, 1)'\n        } else if (status >= 0.7) {\n          return 'rgba(242,68,68, 1)'\n        }\n      }\n\n      function setborderColor (chart, status) {\n        chart.data.datasets[0].borderColor = getBorderColor(status)\n      }\n\n      setborderColor(chart, currentStatus)\n\n      function getGradientColor (status) {\n        if (status < 0.5) {\n          return ['rgba(0, 181, 63, 0.01)', 'rgba(0, 181, 63, 0.6)']\n        } else if (status >= 0.5 && status <= 0.7) {\n          return ['rgba(255, 102, 0, 0.01)', 'rgba(255, 102, 0, 0.6)']\n        } else if (status >= 0.7) {\n          return ['rgba(242,68,68, 0.01)', 'rgba(242,68,68, 0.6)']\n        }\n      }\n\n      function setGradient (chart, status) {\n        const scales = chart.scales\n        const color = chart.ctx.createLinearGradient(0, scales['x-axis-0'].top, 0, 0)\n        const chartColors = getGradientColor(status)\n\n        color.addColorStop(0, chartColors[0])\n        color.addColorStop(1, chartColors[1])\n\n        chart.data.datasets[0].backgroundColor = color\n      }\n\n      setGradient(chart, currentStatus)\n    }\n  }]\n})\n","const acc = document.getElementsByClassName('faq__accordion')\nconst accHeader = document.getElementsByClassName('faq__accordion-header-text')\n\nfor (let i = 0; i < acc.length; i++) {\n  acc[i].addEventListener('click', function () {\n    accHeader[i].classList.toggle('faq__accordion-header-text_open')\n\n    const panel = this.nextElementSibling\n    if (panel.style.maxHeight) {\n      panel.style.maxHeight = null\n    } else {\n      panel.style.maxHeight = panel.scrollHeight + 'px'\n    }\n  })\n}\n","const reportProblemButton = document.querySelector('.reportProblem__button')\nlet isReportButtonAlreadyclickedBefore = false;\n\nreportProblemButton.addEventListener('click', (event) => {\n  event.preventDefault()\n  \n  const reportData = {\n    type:'report-without-description',\n    languageCode: datalayer.language.code,\n    countryCode: datalayer.country.code,\n    nameHyphen: datalayer.service.nameHyphen,\n    cityName: datalayer.city.asciiNameHyphen,\n    description: null,\n  }\n\n  const currentURL = window.location.href\n\n  const url = `${currentURL}/report-problem`\n\n  if (!isReportButtonAlreadyclickedBefore) {\n    fetch(url, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(reportData)\n    })\n  }\n  \n  isReportButtonAlreadyclickedBefore = true\n})\n","require('../../1-plugins/chartjs/_chartjs.js')\nrequire('../../2-base-blocks/_modal.js')\nrequire('../../3-blocks/_header.js')\nrequire('../../3-blocks/_downChart.js')\nrequire('../../3-blocks/_faq.js')\nrequire('../../3-blocks/_reportProblem.js')\n"]}